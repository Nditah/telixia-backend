{"version":3,"sources":["../src/app.js"],"names":["dotenv","config","port","process","env","PORT","app","use","bodyParser","urlencoded","extended","json","limit","defaultPath","path","join","__dirname","express","static","get","req","res","console","log","render","next","locals","userId","userType","role","api","error","Error","status","message","listen","pool","query","err","result","fields","solution","sequelize","authenticate","then","catch"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAGA;;;;AACA;;;;AACA;;;;;;AAEAA,iBAAOC,MAAP;;AALA;;AAMA,IAAMC,OAAOC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;;AAEA,IAAMC,MAAM,wBAAZ;;AAEAA,IAAIC,GAAJ,CAAQ,uBAAR;AACAD,IAAIC,GAAJ,CAAQC,qBAAWC,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAJ,IAAIC,GAAJ,CAAQC,qBAAWG,IAAX,CAAgB,EAAEC,OAAO,MAAT,EAAhB,CAAR;AACAN,IAAIC,GAAJ,CAAQ,sBAAO,KAAP,CAAR;AACAD,IAAIC,GAAJ,CAAQ,qBAAR;AACAD,IAAIC,GAAJ,CAAQ,4BAAR;;AAEA,IAAMM,cAAcC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,SAArB,CAApB;AACAV,IAAIC,GAAJ,CAAQU,kBAAQC,MAAR,CAAeL,WAAf,CAAR;;AAEAP,IAAIa,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACvBC,YAAQC,GAAR,CAAY,cAAZ,EAA4BV,WAA5B;AACAQ,QAAIG,MAAJ,CAAcX,WAAd;AACA;AACA;AACH,CALD;;AAOA;AACAP,IAAIC,GAAJ,CAAQ,UAACa,GAAD,EAAMC,GAAN,EAAWI,IAAX,EAAoB;AACxBJ,QAAIK,MAAJ,CAAWC,MAAX,GAAoB,CAApB;AACAN,QAAIK,MAAJ,CAAWE,QAAX,GAAsB,WAAtB;AACAP,QAAIK,MAAJ,CAAWG,IAAX,GAAkB,EAAlB;AACAJ;AACH,CALD;;AAOA;AACAnB,IAAIC,GAAJ,CAAQ,MAAR,EAAgBuB,aAAhB;;AAEAxB,IAAIC,GAAJ,CAAQ,UAACa,GAAD,EAAMC,GAAN,EAAWI,IAAX,EAAoB;AACxB,QAAMM,QAAQ,IAAIC,KAAJ,CAAU,YAAV,CAAd;AACAD,UAAME,MAAN,GAAe,GAAf;AACAR,SAAKM,KAAL;AACH,CAJD;;AAMAzB,IAAIC,GAAJ,CAAQ,UAACwB,KAAD,EAAQX,GAAR,EAAaC,GAAb,EAAkBI,IAAlB,EAA2B;AAC/BJ,QAAIY,MAAJ,CAAWF,MAAME,MAAN,IAAgB,GAA3B;AACAZ,QAAIV,IAAJ,CAAS;AACLoB,eAAO;AACHG,2CAA6BH,MAAMG;AADhC;AADF,KAAT;AAKAT;AACH,CARD;;AAUA;AACAnB,IAAI6B,MAAJ,CAAWjC,IAAX,EAAiB,YAAM;AACnBoB,YAAQC,GAAR,6CAAsDrB,IAAtD;AACH,CAFD;;AAIAkC,mBAAKC,KAAL,CAAW,0BAAX,EAAuC,UAACC,GAAD,EAAMC,MAAN,EAAcC,MAAd,EAAyB;AAC5D,QAAIF,GAAJ,EAAShB,QAAQC,GAAR,kCAA2Ce,IAAIJ,OAA/C;AACT,QAAIK,UAAUA,OAAQ,CAAR,EAAYE,QAAZ,KAAyB,CAAvC,EAA0C;AACtCnB,gBAAQC,GAAR,CAAY,0CAAZ;AACH,KAFD,MAEO;AACHD,gBAAQC,GAAR,6CAAsDgB,MAAtD;AACH;AACJ,CAPD;;AASAG,oBACKC,YADL,GAEKC,IAFL,CAEU,YAAM;AACRtB,YAAQC,GAAR,CAAY,mDAAZ;AACH,CAJL,EAKKsB,KALL,CAKW,UAACP,GAAD,EAAS;AACZhB,YAAQS,KAAR,CAAc,wCAAd,EAAwDO,IAAIJ,OAA5D;AACH,CAPL;;kBASe5B,G","file":"app.js","sourcesContent":["import \"babel-polyfill\";\nimport express from \"express\";\nimport compression from \"compression\";\nimport bodyParser from \"body-parser\";\nimport morgan from \"morgan\";\nimport dotenv from \"dotenv\";\nimport cors from \"cors\";\nimport path from \"path\";\nimport helmet from \"helmet\";\n\n// import routes\nimport api from \"./api\";\nimport pool from \"./config/database\";\nimport sequelize from \"./config/sequelize\";\n\ndotenv.config();\nconst port = process.env.PORT || 3000;\n\nconst app = express();\n\napp.use(helmet());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(bodyParser.json({ limit: \"10mb\" }));\napp.use(morgan(\"dev\"));\napp.use(cors());\napp.use(compression());\n\nconst defaultPath = path.join(__dirname, \"/public\");\napp.use(express.static(defaultPath));\n\napp.get(\"/\", (req, res) => {\n    console.log(\"defaultPath \", defaultPath);\n    res.render(`${defaultPath}/index.html`);\n    // res.sendFile(path.join(defaultPath));\n    // res.send(`<h1>Click to View <a href='${defaultPath}'>API Documentation</a></h1>`);\n});\n\n// modify request object\napp.use((req, res, next) => {\n    res.locals.userId = 0;\n    res.locals.userType = \"anonymous\";\n    res.locals.role = \"\";\n    next();\n});\n\n// Use Routes\napp.use(\"/api\", api);\n\napp.use((req, res, next) => {\n    const error = new Error(\"Not found!\");\n    error.status = 404;\n    next(error);\n});\n\napp.use((error, req, res, next) => {\n    res.status(error.status || 500);\n    res.json({\n        error: {\n            message: `Telixia API says ${error.message}`,\n        },\n    });\n    next();\n});\n\n// listen for requests\napp.listen(port, () => {\n    console.log(`\\n=======\\nServer is listening on port ${port}`);\n});\n\npool.query(\"SELECT 1 + 1 AS solution\", (err, result, fields) => {\n    if (err) console.log(`\\n=======\\nDatabase Error.\\n${err.message}`);\n    if (result && result[ 0 ].solution === 2) {\n        console.log(\"\\n=======\\nDatabase is ready!\\n=======\\n\");\n    } else {\n        console.log(`\\n=======\\nDatabase is yet not ready!\\n${result}`);\n    }\n});\n\nsequelize\n    .authenticate()\n    .then(() => {\n        console.log(\"\\nConnection has been established successfully.\\n\");\n    })\n    .catch((err) => {\n        console.error(\"\\nUnable to connect to the database:\\n\", err.message);\n    });\n\nexport default app;\n"]}