{"version":3,"sources":["../../src/lib/notification-manager.js"],"names":["async","require","Config","gcm","apns","log4js","Path","_","rp","nodeMailerModule","smtpTransport","fs","filepath","Handlebars","twilioCredentials","get","nodeMailer","androidPushSettings","iOSPushSettings","AppSettings","client","accountSid","authToken","Constants","transporter","createTransport","Mandrill","logger","getLogger","sendEmail","emailRequestId","options","method","uri","body","json","then","parsedBody","console","log","catch","err","sendCustomEmail","template","subject","data","sql","connection","query","email_to","supportEmail","JSON","stringify","result","insertId","sendPush","pushDetails","userType","payload","flag","androidPushTokens","iosPushTokens","devices","deviceDetails","lenDevice","length","i","deviceToken","deviceType","APP_CONSTANTS","DATABASE","DEVICE_TYPES","ANDROID","push","IOS","sendAndroidPushNotification","text","sendIosPushNotification","e","sendDataSMSToUser","dataVariable","messageType","phoneNo","callback","twilioNumber","smsFromNumber","smsOptions","from","to","series","cb","renderMessageFromTemplateAndVariables","messages","create","message","res","responses","STATUS_MSG","SUCCESS","DEFAULT","sendEmailToUser","userRole","emailType","emailVariables","emailId","mailOptions","html","notificationMessages","drivrRegisteredEmail","emailSubject","emailMessage","registrationEmail","forgotPassword","contactDriverForm","contactBusinessForm","sendMailViaTransporter","templateData","variablesData","compile","iosDeviceToken","certificate","gateway","USER_ROLES","CUSTOMER","BUSINESS","customer","iosApnCertificate","path","cert","certData","key","keyData","passphrase","ca","pfx","pfxData","rejectUnauthorized","enhanced","autoAdjustCache","connectionTimeout","debug","DRIVER","driver","status","msg","snd","apnsConnection","Connection","note","Notification","expiry","Math","floor","Date","now","contentAvailable","sound","alert","newsstandAvailable","each","token","trace","error","pushNotification","type","on","errCode","notification","device","deviceTokens","brandName","gcmSender","Message","collapseKey","delayWhileIdle","timeToLive","brand_name","sender","Sender","registrationIds","send","info","sendMail","createBookingMessage","verificationCodeMsg","userCredentialMessage","patientRegisteredEmail","driverRegisteredEmail","languageSpecificMessages","EN","ES_MX","module","exports"],"mappings":"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","file":"notification-manager.js","sourcesContent":["/* eslint-disable default-case */\n/* eslint-disable complexity */\n/* eslint-disable prefer-destructuring */\n/* eslint-disable vars-on-top */\n/* eslint-disable no-var */\n/* eslint-disable import/no-unresolved */\n/* eslint-disable import/no-extraneous-dependencies */\nconst async = require(\"neo-async\");\nconst Config = require(\"config\");\nconst gcm = require(\"node-gcm\");\nconst apns = require(\"apn\");\nconst log4js = require(\"log4js\");\nconst Path = require(\"path\");\nconst _ = require(\"lodash\");\nconst rp = require(\"request-promise\");\nconst nodeMailerModule = require(\"nodemailer\");\nconst smtpTransport = require(\"nodemailer-smtp-transport\");\nconst fs = require(\"fs\");\nconst filepath = require(\"filepath\");\nconst Handlebars = require(\"handlebars\");\n\nconst twilioCredentials = Config.get(\"twilioCredentials\");\nconst nodeMailer = Config.get(\"nodeMailer\");\nconst androidPushSettings = Config.get(\"androidPushSettings\");\nconst iOSPushSettings = Config.get(\"iOSPushSettings\");\nconst AppSettings = Config.get(\"AppSettings\");\n\nconst client = require(\"twilio\")(twilioCredentials.accountSid, twilioCredentials.authToken);\nconst Constants = require(\"../constants\");\n\nconst transporter = nodeMailerModule.createTransport(smtpTransport(nodeMailer.Mandrill));\nconst logger = log4js.getLogger(\"[Notification_Manager]\");\n\nfunction sendEmail(emailRequestId) {\n    const options = {\n        method: \"POST\",\n        uri: \"http://localhost:1337/notification\",\n        body: { emailRequestId },\n        json: true,\n    };\n    rp(options)\n        .then((parsedBody) => {\n            console.log(\"Email Sent: \", parsedBody);\n        })\n        .catch((err) => {\n            console.log(\"Error sending Email: \", err);\n        });\n}\n\nconst sendCustomEmail = function (template, subject, data) {\n    const sql = \"INSERT INTO `mailbox_queue` (`email_identifier`, `subject`, `to_address`, `from_address`, `variables_json`, `created_at`) VALUES (?,?,?,?,?,NOW())\";\n    connection.query(\n        sql, [template, subject, data.email_to, `Tr1pp <${AppSettings.supportEmail}>`, JSON.stringify(data)],\n        (err, result) => {\n            if (err) {\n                console.log(\"Error creating mail queue: \", err);\n            } else {\n                sendEmail(result.insertId);\n            }\n        },\n    );\n};\n\nconst sendPush = (pushDetails, userType) => {\n    console.log(\"=====================SENDING NOTIFICATIONS==========================\", pushDetails, userType);\n    pushDetails.payload.flag = pushDetails.flag;\n    const androidPushTokens = [];\n    const iosPushTokens = [];\n    const devices = pushDetails.deviceDetails;\n    const lenDevice = devices.length;\n    for (let i = 0; i < lenDevice; i++) {\n        if (devices[ i ] && devices[ i ].deviceToken) {\n            const deviceToken = devices[ i ].deviceToken;\n            const deviceType = devices[ i ].deviceType;\n            if (deviceType === Constants.APP_CONSTANTS.DATABASE.DEVICE_TYPES.ANDROID) { androidPushTokens.push(deviceToken); } else if (deviceType === Constants.APP_CONSTANTS.DATABASE.DEVICE_TYPES.IOS) { iosPushTokens.push(deviceToken); }\n        }\n    }\n    try {\n        if (androidPushTokens.length > 0) { sendAndroidPushNotification(androidPushTokens, pushDetails.text, (pushDetails.flag || 0), userType); }\n        if (iosPushTokens.length > 0) { sendIosPushNotification(iosPushTokens, pushDetails.text, (pushDetails.payload || null), userType); }\n    } catch (e) {\n    }\n};\n\n/*\n @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n @ sendSMS Function\n @ This function will initiate sending sms as per the smsOptions are set\n @ Requires following parameters in smsOptions\n @ from:  // sender address\n @ to:  // list of receivers\n @ Body:  // SMS text message\n @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n */\n\nconst sendDataSMSToUser = (dataVariable, messageType, phoneNo, callback) => {\n    const twilioNumber = twilioCredentials.smsFromNumber;\n    const smsOptions = {\n        from: twilioNumber,\n        to: phoneNo,\n        body: null,\n    };\n    async.series([\n        (cb) => {\n            smsOptions.body = renderMessageFromTemplateAndVariables(messageType, dataVariable);\n            cb();\n        },\n        (cb) => {\n            client.messages.create(smsOptions, (err, message) => {\n                cb(err, res);\n            });\n        },\n    ], (err, responses) => {\n        if (err) {\n            callback(err);\n        } else {\n            callback(null, Constants.APP_CONSTANTS.STATUS_MSG.SUCCESS.DEFAULT);\n        }\n    });\n};\n\nconst sendEmailToUser = (userRole, emailType, emailVariables, emailId, callback) => {\n    const from = \"Support <support@peacegroup.ng>\";\n    const mailOptions = {\n        from,\n        to: emailId,\n        subject: null,\n        html: null,\n    };\n    async.series([\n        (cb) => {\n            switch (emailType) {\n            case \"DRIVER_REGISTERED\":\n                mailOptions.subject = notificationMessages.drivrRegisteredEmail.emailSubject;\n                mailOptions.html = renderMessageFromTemplateAndVariables(notificationMessages.drivrRegisteredEmail.emailMessage, emailVariables);\n                break;\n            case \"REGISTRATION_MAIL\":\n                mailOptions.subject = notificationMessages.registrationEmail.emailSubject;\n                mailOptions.html = renderMessageFromTemplateAndVariables(notificationMessages.registrationEmail.emailMessage, emailVariables);\n                break;\n            case \"FORGOT_PASSWORD\":\n                mailOptions.subject = notificationMessages.forgotPassword.emailSubject;\n                mailOptions.html = renderMessageFromTemplateAndVariables(notificationMessages.forgotPassword.emailMessage, emailVariables);\n                break;\n            case \"DRIVER_CONTACT_FORM\":\n                mailOptions.subject = notificationMessages.contactDriverForm.emailSubject;\n                mailOptions.html = renderMessageFromTemplateAndVariables(notificationMessages.contactDriverForm.emailMessage, emailVariables);\n                break;\n            case \"BUSINESS_CONTACT_FORM\":\n                mailOptions.subject = notificationMessages.contactBusinessForm.emailSubject;\n                mailOptions.html = renderMessageFromTemplateAndVariables(notificationMessages.contactBusinessForm.emailMessage, emailVariables);\n                break;\n            }\n            cb();\n        }, (cb) => {\n            sendMailViaTransporter(mailOptions, (err, res) => {\n                cb(err, res);\n            });\n        },\n    ], (err, responses) => {\n        if (err) {\n            callback(err);\n        } else {\n            callback();\n        }\n    });\n};\n\nfunction renderMessageFromTemplateAndVariables(templateData, variablesData) {\n    return Handlebars.compile(templateData)(variablesData);\n}\n\n/*\n ==========================================================\n Send the notification to the iOS device for customer\n ==========================================================\n */\nfunction sendIosPushNotification(iosDeviceToken, message, payload, userType) {\n    let certificate;\n    let gateway;\n    let options;\n\n    if (userType === Constants.APP_CONSTANTS.DATABASE.USER_ROLES.CUSTOMER || userType === Constants.APP_CONSTANTS.DATABASE.USER_ROLES.BUSINESS) {\n        certificate = Config.iOSPushSettings.customer.iosApnCertificate;\n        console.log(\"<<<<<<<<<< certificate from config >>>>>>>>>>>\", certificate);\n\n        certificate = filepath.create(certificate).path;\n\n        console.log(\"certificate\", certificate);\n        gateway = iOSPushSettings.customer.gateway;\n        console.log(\"gateway\", gateway);\n        options = {\n            cert: certificate,\n            certData: null,\n            key: certificate,\n            keyData: null,\n            passphrase: \"click\",\n            ca: null,\n            pfx: null,\n            pfxData: null,\n            gateway,\n            // port: 2195,\n            rejectUnauthorized: true,\n            enhanced: true,\n            // cacheLength: 100,\n            autoAdjustCache: true,\n            connectionTimeout: 0,\n            // ssl: true,\n            debug: true,\n            // production: true\n        };\n    } else if (userType === Constants.APP_CONSTANTS.DATABASE.USER_ROLES.DRIVER) {\n        certificate = Config.iOSPushSettings.driver.iosApnCertificate;\n        console.log(\"<<<<<<<<<< certificate from config >>>>>>>>>>>\", certificate);\n        certificate = filepath.create(certificate).path;\n\n        console.log(\"<<<<<<<<<< CERT PATH >>>>>>>>>>>\", certificate);\n        gateway = iOSPushSettings.driver.gateway;\n        console.log(\"certificate\", certificate);\n        console.log(\"gateway\", gateway);\n        options = {\n            cert: certificate,\n            certData: null,\n            key: certificate,\n            keyData: null,\n            passphrase: \"click\",\n            ca: null,\n            pfx: null,\n            pfxData: null,\n            gateway,\n            // port: 2195,\n            rejectUnauthorized: true,\n            enhanced: true,\n            // cacheLength: 100,\n            autoAdjustCache: true,\n            connectionTimeout: 0,\n            // ssl: true,\n            debug: true,\n            // production: true\n        };\n    } else {\n        console.log(\"error......................................\");\n    }\n\n    const status = 1;\n    const msg = message;\n    const snd = \"dong.aiff\";\n    const apnsConnection = new apns.Connection(options);\n    const note = new apns.Notification();\n\n    note.expiry = Math.floor(Date.now() / 1000) + 3600;\n    note.contentAvailable = 1;\n    note.sound = snd;\n    note.alert = msg;\n    note.newsstandAvailable = status;\n    note.payload = { message: payload };\n\n    _.each(iosDeviceToken, (token) => {\n        console.log(\"DEVICE TOKEN: \", token);\n        logger.trace(token);\n        if (!token || token == \"(null)\" || token == \"deviceToken\" || !token.length || token.length !== 64) {\n            logger.error(\"IOS PUSH ERROR with Token: \", token);\n        } else {\n            // var device = new apns.token(token);\n            logger.debug(\"NOTE: \", note);\n            console.log(\"device\", token);\n            apnsConnection.pushNotification(note, token);\n        }\n    });\n    // Handle these events to confirm that the notification gets\n    // transmitted to the APN server or find error if any\n    function log(type) {\n        return function () {\n            console.log(`iOS PUSH NOTIFICATION RESULT: ${type}`);\n        };\n    }\n\n    apnsConnection.on(\"error\", log(\"error\"));\n    apnsConnection.on(\"transmitted\", log(\"transmitted\"));\n    apnsConnection.on(\"timeout\", log(\"timeout\"));\n    apnsConnection.on(\"connected\", log(\"connected\"));\n    apnsConnection.on(\"disconnected\", log(\"disconnected\"));\n    apnsConnection.on(\"socketError\", (errCode, notification, device) => {\n        console.error(`Notification caused  SOCKET ERROR error: ${errCode } for device `, device, notification);\n    });\n    apnsConnection.on(\"transmissionError\", (errCode, notification, device) => {\n        console.error(`Notification caused error: ${errCode} for device `, device, notification);\n    });\n    apnsConnection.on(\"cacheTooSmall\", log(\"cacheTooSmall\"));\n}\n\n/*\n ==============================================\n Send the notification to the android device\n =============================================\n */\nfunction sendAndroidPushNotification(deviceTokens, message, flag, userType) {\n    let brandName = \"\";\n    let gcmSender = \"\";\n    if (userType === Constants.APP_CONSTANTS.DATABASE.USER_ROLES.CUSTOMER || userType === Constants.APP_CONSTANTS.DATABASE.USER_ROLES.BUSINESS) {\n        brandName = androidPushSettings.customer.brandName;\n        gcmSender = androidPushSettings.customer.gcmSender;\n    }\n    if (userType === Constants.APP_CONSTANTS.DATABASE.USER_ROLES.DRIVER) {\n        brandName = androidPushSettings.driver.brandName;\n        gcmSender = androidPushSettings.driver.gcmSender;\n    }\n    console.log(message);\n    var message = new gcm.Message({\n        collapseKey: \"demo\",\n        delayWhileIdle: false,\n        timeToLive: 2419200,\n        data: {\n            message,\n            brand_name: brandName,\n            flag,\n        },\n    });\n    const sender = new gcm.Sender(gcmSender);\n    const registrationIds = [];\n    registrationIds.push(deviceTokens);\n\n    logger.debug(deviceTokens);\n    logger.debug(message);\n    sender.send(message, deviceTokens, 4, (err, result) => {\n        if (err) {\n            logger.error(`ANDROID NOTIFICATION ERROR: ${JSON.stringify(err)}`);\n        } else {\n            logger.info(`ANDROID NOTIFICATION RESULT: ${JSON.stringify(result)}`);\n        }\n    });\n}\n\n/*\n @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n @ sendMailViaTransporter Function\n @ This function will initiate sending email as per the mailOptions are set\n @ Requires following parameters in mailOptions\n @ from:  // sender address\n @ to:  // list of receivers\n @ subject:  // Subject line\n @ html: html body\n @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n */\nfunction sendMailViaTransporter(mailOptions, cb) {\n    transporter.sendMail(mailOptions, (error, info) => {\n        console.log(\"Mail Sent Callback Error:\", error);\n        console.log(\"Mail Sent Callback Ifo:\", info);\n    });\n    cb(null, null); // Callback is outside as mail sending confirmation can get delayed by a lot of time\n}\n\nconst notificationMessages = {\n    createBookingMessage: \"Hola {{customerName}} , you have booked a ride with us . Your booking reference number is : {{booking_number}}\",\n    verificationCodeMsg: \"Your 4 digit verification code for {{project_name}} is {{four_digit_verification_code}}\",\n    userCredentialMessage: \"Hi {{username}}, Your Tr1pp panel login username is your email and password is {{password}}.\",\n    patientRegisteredEmail: {\n        emailMessage: \"Dear {{user_name}},<br><br>You have been registered on Drivr. Please download <a href='#'>Drivr app</a> to track your treatment. You username is your email and password is {{password}}\",\n        emailSubject: \"User Registered Successfully\",\n    },\n    driverRegisteredEmail: {\n        emailMessage: \"Dear {{user_name}},<br><br>You have been registered on Drivr. Please download <a href='#'>Drivr app</a>. You username is your email and password is {{password}}\",\n        emailSubject: \"Driver Registered Successfully\",\n    },\n    drivrRegisteredEmail: {\n        emailMessage: \"Dear {{user_name}},<br><br>You have been registered on Drivr. Please download <a href='#'>Drivr app</a>. You username is your email and password is {{password}} .\",\n        emailSubject: \"Driver Registered Successfully\",\n    },\n    registrationEmail: {\n        emailMessage: \"Dear {{user_name}},<br><br>Please <a href={{verification_url}}>click here</a> to verify your email address\",\n        emailSubject: \"DRIVR : Verification Email \",\n    },\n    contactDriverForm: {\n        emailMessage: \"A new driver has showed interest <br><br> Details : <br><br> Name : {{fullName}} <br><br> Email : {{email}} <br><br> Phone No : {{phoneNo}} <br><br> Vehicle Type : {{vehicleType}} <br><br> Bank Account : {{bankAccountBoolean}} <br><br> Heard From : {{heardFrom}}\",\n        emailSubject: \"New Driver Contact Request\",\n    },\n    contactBusinessForm: {\n        emailMessage: \"A new business has showed interest <br><br> Details : <br><br> Name : {{fullName}} <br><br> Email : {{email}} <br><br> Phone No : {{phoneNo}} <br><br> Business Name: {{businessName}} <br><br> Business Address: {{businessAddress}}  <br><br> Delivery Service : {{ownDeliveryService}} <br><br> Heard From : {{heardFrom}}\",\n        emailSubject: \"New Business Contact Request\",\n    },\n    forgotPassword: {\n        emailMessage: \"Dear {{user_name}}, <br>You have requested for reset password, please <a href='{{password_reset_link}}'>click here</a> to reset your password.<br><br> Drivr Support\",\n        emailSubject: \"Reset Password Email\",\n    },\n};\n\nconst languageSpecificMessages = {\n    verificationCodeMsg: {\n        EN: \"Your 4 digit verification code is {{four_digit_verification_code}}\",\n        ES_MX: \"Your 4 digit verification code is {{four_digit_verification_code}}\",\n    },\n};\n\nmodule.exports = {\n    sendDataSMSToUser,\n    sendEmailToUser,\n    sendPush,\n    notificationMessages,\n    languageSpecificMessages,\n    sendCustomEmail,\n};\n"]}