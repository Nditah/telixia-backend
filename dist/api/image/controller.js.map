{"version":3,"sources":["../../../src/api/image/controller.js"],"names":["req","res","uploadLocally","err","message","name","body","url","files","path","data","created_by","console","log","Joi","validate","schemaCreate","error","Image","create","result","logger","info","STATUS_MSG","SUCCESS","DEFAULT","createRecord","uploadToAws","location","end","addImageAws","query","schemaFetch","id","offset","limit","fields","parseInt","fieldsArray","replace","split","eligibleField","Object","keys","schema","push","attributes","forEach","item","includes","options","length","findOne","where","findAll","fetchRecord","params","recordId","schemaUpdate","findByPk","model","update","updateRecord","destroy","deleteRecord","dotenv","config","aws","secretAccessKey","process","env","SECRET_ACCESS_KEY","accessKeyId","ACCESS_KEY_ID","region","s3","S3","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level","imageUrl","storedLocally","multer","diskStorage","destination","callback","appRoot","fieldname","Date","toISOString","originalname","storedOnAws","bucket","acl","metadata","fieldName","key","storage","array"],"mappings":"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","file":"controller.js","sourcesContent":["import Joi from \"joi\";\nimport log4js from \"log4js\";\nimport aws from \"aws-sdk\";\nimport multer from \"multer\";\nimport multerS3 from \"multer-s3\";\nimport appRoot from \"app-root-path\";\nimport dotenv from \"dotenv\";\nimport Image, { schemaFetch, schemaCreate, schemaUpdate } from \"./model\";\nimport { success, fail, notFound } from \"../../lib/response\";\nimport { STATUS_MSG } from \"../../constants\";\n\ndotenv.config();\n\naws.config.update({\n    secretAccessKey: process.env.SECRET_ACCESS_KEY,\n    accessKeyId: process.env.ACCESS_KEY_ID,\n    region: \"eu-west-2\",\n});\n\nconst s3 = new aws.S3();\n\n// Logging\nconst logger = log4js.getLogger(\"[image]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/image.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\nlet imageUrl;\n\nconst storedLocally = multer.diskStorage({\n    destination(req, file, callback) {\n        callback(null, `${appRoot}/src/upload/Images`);\n    },\n    filename(req, file, callback) {\n        imageUrl = `${file.fieldname}_${new Date().toISOString()}_${file.originalname}`;\n        callback(null, imageUrl);\n    },\n});\n\nconst storedOnAws = multerS3({\n    s3,\n    bucket: \"peacebucket\",\n    acl: \"public-read\",\n    metadata(req, file, callback) {\n        callback(null, { fieldName: file.fieldname });\n    },\n    key(req, file, callback) {\n        imageUrl = `${file.fieldname}_${new Date().toISOString()}_${file.originalname}`;\n        callback(null, imageUrl);\n    },\n});\n\nconst uploadLocally = multer({ storage: storedLocally }).array(\"image\", 3); // Field name and max count\nconst uploadToAws = multer({ storage: storedOnAws }).array(\"image\", 3);\n\nexport async function createRecord(req, res) {\n    return uploadLocally(req, res, async (err) => {\n        if (err) return fail(res, 422, `Error uploading image. ${err.message}`);\n        const { name } = req.body;\n        const url = req.files[ 0 ].path;\n        const data = { name, url, created_by: 1 };\n        console.log(data);\n        const { error } = Joi.validate(data, schemaCreate);\n        if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n        try {\n            const result = await Image.create(data);\n            if (!result) {\n                logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n                return notFound(res, \"Error: Bad Request: Model not found\");\n            }\n            return success(res, 201, result, \"Record created successfully!\");\n        } catch (errata) {\n            logger.error(errata);\n            return fail(res, 500, `Error creating record. ${errata.message}`);\n        }\n    });\n}\n\nexport async function addImageAws(req, res) {\n    return uploadToAws(req, res, async (err) => {\n        const { name } = req.body;\n        // const { error } = Joi.validate(data, schemaCreate);\n        // if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n\n        const url = req.files[ 0 ].location;\n        console.log(req.body, req.files[ 0 ]);\n        const data = { name, url };\n        if (err) return res.end(`Error uploading image. ${err.message}`);\n\n        try {\n            const result = await Image.create(data);\n            if (!result) {\n                logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n                return notFound(res, \"Error: Bad Request: Model not found\");\n            }\n            return success(res, 201, result, \"Record created successfully!\");\n        } catch (error) {\n            logger.error(error);\n            return fail(res, 500, `Error creating record. ${error.message}`);\n        }\n    });\n}\n\n// eslint-disable-next-line complexity\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    const { error } = Joi.validate(query, schemaFetch);\n    if (error) return fail(res, 422, `Error validating request query. ${error.message}`);\n    let { id, offset, limit, fields } = query;\n    id = parseInt(id, 10);\n    offset = parseInt(offset, 10);\n    limit = parseInt(limit, 10);\n    let fieldsArray = [];\n    if (fields && typeof fields === \"string\") {\n        fieldsArray = fields.replace(/\\s+/g, \"\").split(\",\");\n    }\n    const eligibleField = Object.keys(schema);\n    eligibleField.push(\"created_at\", \"updated_at\");\n    const attributes = [];\n    let result;\n    fieldsArray.forEach((item) => {\n        if (eligibleField.includes(item)) attributes.push(item);\n    });\n    const options = {};\n    if (attributes.length > 0) options.attributes = attributes;\n    if (offset >= 0) options.offset = offset;\n    if (limit > 0) options.limit = limit;\n    try {\n        if (id) {\n            if (attributes.length > 0) {\n                result = await Image.findOne({ where: { id }, attributes });\n            } else {\n                result = await Image.findOne({ where: { id } });\n            }\n        } else {\n            result = await Image.findAll(options);\n        }\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\nexport async function updateRecord(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = Joi.validate(data, schemaUpdate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const model = await Image.findByPk(id);\n        if (!model) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        const result = await model.update(data);\n        return success(res, 200, result, \"Record updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deleteRecord(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const model = await Image.findByPk(id);\n        if (!model) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        const result = await model.destroy();\n        return success(res, 200, result, \"Record deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n"]}