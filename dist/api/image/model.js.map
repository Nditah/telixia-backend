{"version":3,"sources":["../../../src/api/image/model.js"],"names":["Sequelize","force","DATABASE","DROP_TABLE_IF_EXIST","FALSE","schemaFetch","id","Joi","number","optional","offset","limit","fields","string","schemaCreate","name","trim","required","url","created_by","schemaUpdate","updated_by","schema","type","INTEGER","primaryKey","autoIncrement","STRING","allowNull","options","timestamps","paranoid","underscored","freezeTableName","Image","sequelize","define","sync","then","bulkCreate","table"],"mappings":";;;;;;;AASA;;;;AACA;;IAAYA,S;;AACZ;;;;AACA;;AACA;;;;;;;;AAEA,IAAMC,QAAQC,oBAASC,mBAAT,CAA6BC,KAA3C,C,CAfA;;;;;;;;;AAiBO,IAAMC,oCAAc;AACvBC,QAAIC,cAAIC,MAAJ,GAAaC,QAAb,EADmB;AAEvBC,YAAQH,cAAIC,MAAJ,GAAaC,QAAb,EAFe;AAGvBE,WAAOJ,cAAIC,MAAJ,GAAaC,QAAb,EAHgB;AAIvBG,YAAQL,cAAIM,MAAJ,GAAaJ,QAAb;AAJe,CAApB;;AAOA,IAAMK,sCAAe;AACxBC,UAAMR,cAAIM,MAAJ,GAAaG,IAAb,GAAoBC,QAApB,EADkB;AAExBC,SAAKX,cAAIM,MAAJ,GAAaG,IAAb,GAAoBC,QAApB,EAFmB;AAGxB;AACAE,gBAAYZ,cAAIC,MAAJ,GAAaS,QAAb;AAJY,CAArB;;AAOA,IAAMG,sCAAe;AACxBL,UAAMR,cAAIM,MAAJ,GAAaG,IAAb,GAAoBC,QAApB,EADkB;AAExBC,SAAKX,cAAIM,MAAJ,GAAaG,IAAb,GAAoBC,QAApB,EAFmB;AAGxBI,gBAAYd,cAAIC,MAAJ,GAAaS,QAAb;AAHY,CAArB;;AAMP,IAAMK,SAAS;AACXhB,QAAI,EAAEiB,MAAMvB,UAAUwB,OAAV,CAAkB,EAAlB,CAAR,EAA+BC,YAAY,IAA3C,EAAiDC,eAAe,IAAhE,EADO;AAEXX,UAAM,EAAEQ,MAAMvB,UAAU2B,MAAlB,EAA0BC,WAAW,KAArC,EAFK;AAGXV,SAAK,EAAEK,MAAMvB,UAAU2B,MAAlB,EAA0BC,WAAW,KAArC,EAHM;AAIXT,gBAAY,EAAEI,MAAMvB,UAAUwB,OAAV,CAAkB,EAAlB,CAAR,EAA+BI,WAAW,KAA1C,EAJD;AAKXP,gBAAY,EAAEE,MAAMvB,UAAUwB,OAAV,CAAkB,EAAlB,CAAR;AALD,CAAf;;AASA,IAAMK,UAAU;AACZC,gBAAY,IADA;AAEZC,cAAU,IAFE;AAGZC,iBAAa,IAHD;AAIZC,qBAAiB;AAJL,CAAhB;AAMA,IAAMC,QAAQC,oBAAUC,MAAV,CAAiB,OAAjB,EAA0Bd,MAA1B,EAAkCO,OAAlC,CAAd;AACAM,oBAAUE,IAAV,GACKC,IADL,CACU;AAAA,WAAMJ,MAAMG,IAAN,CAAW,EAAEpC,YAAF,EAAX,EAAsBqC,IAAtB,CAA2B;AAAA,eAAMJ,MAAMK,UAAN,CAAiBC,eAAjB,CAAN;AAAA,KAA3B,CAAN;AAAA,CADV;;kBAGeN,K","file":"model.js","sourcesContent":["/**\n * @author 4Decoder\n * @property {Number} id Image primaryKey\n * @property {String} name Image name\n * @property {String} url The Image url absolute-path\n * @property {Number} created_by Image record created by\n * @property {Number} updated_by Image record modified by\n * @description Image holds record of all image assets\n */\nimport Joi from \"joi\";\nimport * as Sequelize from \"sequelize\";\nimport sequelize from \"../../config/sequelize\";\nimport { DATABASE } from \"../../constants\";\nimport table from \"./table\";\n\nconst force = DATABASE.DROP_TABLE_IF_EXIST.FALSE;\n\nexport const schemaFetch = {\n    id: Joi.number().optional(),\n    offset: Joi.number().optional(),\n    limit: Joi.number().optional(),\n    fields: Joi.string().optional(),\n};\n\nexport const schemaCreate = {\n    name: Joi.string().trim().required(),\n    url: Joi.string().trim().required(),\n    // image: Joi.any().meta({ swaggerType: \"file\" }).required(),\n    created_by: Joi.number().required(),\n};\n\nexport const schemaUpdate = {\n    name: Joi.string().trim().required(),\n    url: Joi.string().trim().required(),\n    updated_by: Joi.number().required(),\n};\n\nconst schema = {\n    id: { type: Sequelize.INTEGER(11), primaryKey: true, autoIncrement: true },\n    name: { type: Sequelize.STRING, allowNull: false },\n    url: { type: Sequelize.STRING, allowNull: false },\n    created_by: { type: Sequelize.INTEGER(11), allowNull: false },\n    updated_by: { type: Sequelize.INTEGER(11) },\n};\n\n\nconst options = {\n    timestamps: true,\n    paranoid: true,\n    underscored: true,\n    freezeTableName: true,\n};\nconst Image = sequelize.define(\"image\", schema, options);\nsequelize.sync()\n    .then(() => Image.sync({ force }).then(() => Image.bulkCreate(table)));\n    \nexport default Image;"]}