{"version":3,"sources":["../../../src/api/customer/routes.js"],"names":["router","express","Router","get","checkAuth","isValidStaff","fetchRecord","post","createRecord","put","updateRecord","delete","deleteRecord","login"],"mappings":";;;;;;AAIA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;;AAVA;;;;AA0BAF,OAAOG,GAAP,CAAW,YAAX,EAAyB,CAACC,wBAAD,EAAYC,2BAAZ,CAAzB,EAAoDC,uBAApD;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCAN,OAAOO,IAAP,CAAY,YAAZ,EAA0BC,wBAA1B;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCAR,OAAOS,GAAP,CAAW,sBAAX,EAAmC,CAACL,wBAAD,CAAnC,EAAgDM,wBAAhD;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,sBAAd,EAAsC,CAACP,wBAAD,EAAYC,2BAAZ,CAAtC,EAAiEO,wBAAjE;;AAEA;;;;;;;;;;;;AAYAZ,OAAOO,IAAP,CAAY,kBAAZ,EAAgCM,iBAAhC;;kBAEeb,M","file":"routes.js","sourcesContent":["/**\n * @author 4Decoder\n * @description Customer holds record of all customers with terminals\n */\nimport express from \"express\";\nimport { checkAuth, isValidStaff } from \"../../middleware/authorization\";\nimport { fetchRecord, createRecord, updateRecord, deleteRecord, login } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/customers?id={recordId} Retrieve one or all records\n * @apiName RetrieveCustomer\n * @apiGroup Customer\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i http://localhost/api/customers?id=2&fields=id,created_at,updated_at\n * @apiExample {curl} Example usage for retieving multiple records:\n *      curl -i http://localhost/api/customers?offset=10&limit=50\n * @apiParam {Number} id Unique id of the record to retrieve (optional)\n * @apiParam {Number} offset Number of records to skip (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} fields Comma-separated list of record's attributes to retrieve (optional)\n * @apiDescription Records of consolidated list of customers from PMT, PML, PET, Shop etc\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/customers\", [checkAuth, isValidStaff], fetchRecord);\n\n/**\n * @api {post} /api/customers Create customers\n * @apiName CreateCustomer\n * @apiGroup Customer\n * @apiParam {String} access_token master access token.\n * @apiParam {Number} id Customer primaryKey\n * @apiParam {String} customer type \"INDIVIDUAL\", \"ORGANIZATION\"\n * @apiParam {String} title\n * @apiParam {String} surname Customer surname (required)\n * @apiParam {String} other_name Customer other name (required)\n * @apiParam {String} gender Customer gender (required)\n * @apiParam {Date} birth_date Customer date of birth\n * @apiParam {String} phone Customer phone number (required)\n * @apiParam {String} phone2 Customer mobile work or home phone number\n * @apiParam {String} email Customer email address\n * @apiParam {String} password Customer password for accessing the App\n * @apiParam {String} contact_person Customer next-of-kin, or contact person\n * @apiParam {String} contact_person_phone Customer next-of-kin, or contact person phone\n * @apiParam {String} product Customer products of services of interest\n * @apiParam {String} photo Customer photo url\n * @apiParam {String} address Customer residential or work address\n * @apiParam {String} country_iso2 Customer country of residence (required)\n * @apiParam {Boolean} is_pmt_client assert that client is also a PMT customer\n * @apiParam {Boolean} is_pesl_client assert that client is also a PESL customer\n * @apiParam {Boolean} is_pet_client assert that client is also a PET customer\n * @apiParam {Boolean} is_shop_client assert that client is also a SHOP customer\n * @apiParam {Boolean} is_tenant assert if customer is a depot tenant\n * @apiParam {Boolean} is_phone_verified phone verification status\n * @apiParam {Boolean} is_email_verified email verification status\n * @apiParam {String} remark comment about customer\n * @apiParam {Number} created_by (required) id of the staff who created the record\n * @apiParam {Number} updated_by id of the staff who created the record\n * @apiSuccess {Object} Customer Customer's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Customer not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/customers\", createRecord);\n\n/**\n * @api {put} /api/customers/{recordId} Update customers\n * @apiName UpdateCustomer\n * @apiGroup Customer\n * @apiPermission master\n * @apiParam {String} access_token master access token.\n * @apiParam {String} access_token master access token.\n * @apiParam {Number} id Customer primaryKey\n * @apiParam {String} customer type \"INDIVIDUAL\", \"ORGANIZATION\"\n * @apiParam {String} title\n * @apiParam {String} surname Customer surname (required)\n * @apiParam {String} other_name Customer other name (required)\n * @apiParam {String} gender Customer gender (required)\n * @apiParam {Date} birth_date Customer date of birth\n * @apiParam {String} phone Customer phone number (required)\n * @apiParam {String} phone2 Customer mobile work or home phone number\n * @apiParam {String} email Customer email address\n * @apiParam {String} password Customer password for accessing the App\n * @apiParam {String} contact_person Customer next-of-kin, or contact person\n * @apiParam {String} contact_person_phone Customer next-of-kin, or contact person phone\n * @apiParam {String} product Customer products of services of interest\n * @apiParam {String} photo Customer photo url\n * @apiParam {String} address Customer residential or work address\n * @apiParam {String} country_iso2 Customer country of residence (required)\n * @apiParam {Boolean} is_pmt_client assert that client is also a PMT customer\n * @apiParam {Boolean} is_pesl_client assert that client is also a PESL customer\n * @apiParam {Boolean} is_pet_client assert that client is also a PET customer\n * @apiParam {Boolean} is_shop_client assert that client is also a SHOP customer\n * @apiParam {Boolean} is_tenant assert if customer is a depot tenant\n * @apiParam {Boolean} is_phone_verified phone verification status\n * @apiParam {Boolean} is_email_verified email verification status\n * @apiParam {String} remark comment about customer\n * @apiParam {Number} created_by (required) id of the staff who created the record\n * @apiParam {Number} updated_by id of the staff who created the record\n * @apiSuccess {Object} Customer Customer's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Customer not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/customers/:recordId\", [checkAuth], updateRecord);\n\n/**\n * @api {delete} /api/customers/{recordId} Delete customers\n * @apiName DeleteCustomer\n * @apiGroup Customer\n * @apiPermission master\n * @apiParam {String} access_token master access token.\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Customer not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/customers/:recordId\", [checkAuth, isValidStaff], deleteRecord);\n\n/**\n * @api {post} /api/customers/login Login Customer\n * @apiName LoginCustomer\n * @apiGroup Customer\n * @apiPermission master\n * @apiParam {String} email Customer email address (optional)\n * @apiParam {String} password Customer password (optional)\n * @apiParam {String} phone Customer mobile phone number (optional)\n * @apiParam {String} otp Customer One-Time-Password sent to phone (optional)\n * @apiSuccess (Success 200) 200 Login Successful.\n * @apiError 404 Customer not found.\n */\nrouter.post(\"/customers/login\", login);\n\nexport default router;\n"]}