{"version":3,"sources":["../../../src/api/talent/model.js"],"names":["Sequelize","force","DATABASE","DROP_TABLE_IF_EXIST","FALSE","schemaLogin","email","Joi","string","optional","phone","otp","password","schemaFetch","id","number","offset","limit","fields","schemaCreate","talent_type","trim","required","title","surname","other_name","gender","birth_date","date","otp_count","contact_person","contact_person_phone","product","photo","address","country_iso2","packages","is_phone_verified","boolean","is_email_verified","remark","created_by","schemaUpdate","updated_by","schema","type","INTEGER","primaryKey","autoIncrement","ENUM","CUSTOMER_TYPE","INDIVIDUAL","ORGANIZATION","defaultValue","allowNull","STRING","GENDER","MALE","FEMALE","DATEONLY","BOOLEAN","options","timestamps","paranoid","underscored","freezeTableName","Talent","sequelize","define","sync","then","bulkCreate","table"],"mappings":"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","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {Number} id Talent primaryKey\n * @property {String} talent type \"INDIVIDUAL\", \"ORGANIZATION\"\n * @property {String} title\n * @property {String} surname Talent surname (required)\n * @property {String} other_name Talent other name (required)\n * @property {String} gender Talent gender (required)\n * @property {Date} birth_date Talent date of birth\n * @property {String} phone Talent phone number (required)\n * @property {String} email Talent email address\n * @property {String} password Talent password for accessing the App\n * @property {String} otp Talent one-time-password for accessing the App\n * @property {Number} otp_count Number of times OTP has been used without successful transaction\n * @property {String} contact_person Talent next-of-kin, or contact person\n * @property {String} contact_person_phone Talent next-of-kin, or contact person phone\n * @property {String} product Talent products of services of interest\n * @property {String} photo Talent photo url\n * @property {String} address Talent residential or work address\n * @property {String} country_iso2 Talent country of residence (required)\n * @property {String} packages Talent packages of interest\n * @property {Boolean} is_phone_verified phone verification status\n * @property {Boolean} is_email_verified email verification status\n * @property {String} remark comment about talent\n * @property {Number} created_by (required) id of the staff who created the record\n * @property {Number} updated_by id of the staff who created the record\n * @description Records of all company talents.\n */\nimport Joi from \"joi\";\nimport * as Sequelize from \"sequelize\";\nimport sequelize from \"../../config/sequelize\";\nimport { DATABASE, GENDER, CUSTOMER_TYPE } from \"../../constants\";\nimport table from \"./table\";\n\nconst force = DATABASE.DROP_TABLE_IF_EXIST.FALSE;\n\nexport const schemaLogin = {\n    email: Joi.string().optional(),\n    phone: Joi.string().optional(),\n    otp: Joi.string().optional(),\n    password: Joi.string().optional(),\n};\n\nexport const schemaFetch = {\n    id: Joi.number().optional(),\n    offset: Joi.number().optional(),\n    limit: Joi.number().optional(),\n    fields: Joi.string().optional(),\n};\n\nexport const schemaCreate = {\n    talent_type: Joi.string().trim().required(),\n    title: Joi.string().optional(),\n    surname: Joi.string().required(),\n    other_name: Joi.string().required(),\n    gender: Joi.string().required(),\n    birth_date: Joi.date().optional(),\n    phone: Joi.string().required(),\n    email: Joi.string().optional(),\n    password: Joi.string().optional(),\n    otp: Joi.string().optional(),\n    otp_count: Joi.number().optional(),\n    contact_person: Joi.string().required(),\n    contact_person_phone: Joi.string().required(),\n    product: Joi.string().optional(),\n    photo: Joi.string().optional(),\n    address: Joi.string().optional(),\n    country_iso2: Joi.string().trim().required(),\n    packages: Joi.string().optional(),\n    is_phone_verified: Joi.boolean().optional(),\n    is_email_verified: Joi.boolean().optional(),\n    remark: Joi.string().optional(),\n    created_by: Joi.number().required(),\n};\n\nexport const schemaUpdate = {\n    talent_type: Joi.string().trim().optional(),\n    title: Joi.string().optional(),\n    surname: Joi.string().optional(),\n    other_name: Joi.string().optional(),\n    gender: Joi.string().optional(),\n    birth_date: Joi.date().optional(),\n    phone: Joi.string().optional(),\n    email: Joi.string().optional(),\n    password: Joi.string().optional(),\n    otp: Joi.string().optional(),\n    otp_count: Joi.number().optional(),\n    contact_person: Joi.string().optional(),\n    contact_person_phone: Joi.string().optional(),\n    product: Joi.string().optional(),\n    photo: Joi.string().optional(),\n    address: Joi.string().optional(),\n    country_iso2: Joi.string().trim().optional(),\n    packages: Joi.string().optional(),\n    is_phone_verified: Joi.boolean().optional(),\n    is_email_verified: Joi.boolean().optional(),\n    remark: Joi.string().optional(),\n    updated_by: Joi.number().required(),\n};\n\nexport const schema = {\n    id: { type: Sequelize.INTEGER(11), primaryKey: true, autoIncrement: true },\n    talent_type: {\n        type: Sequelize.ENUM(CUSTOMER_TYPE.INDIVIDUAL, CUSTOMER_TYPE.ORGANIZATION),\n        defaultValue: CUSTOMER_TYPE.INDIVIDUAL,\n        allowNull: false,\n    },\n    title: { type: Sequelize.STRING },\n    surname: { type: Sequelize.STRING, allowNull: false },\n    other_name: { type: Sequelize.STRING, allowNull: false },\n    gender: {\n        type: Sequelize.ENUM(GENDER.MALE, GENDER.FEMALE),\n        allowNull: false,\n    },\n    birth_date: { type: Sequelize.DATEONLY },\n    phone: { type: Sequelize.STRING, allowNull: false },\n    email: { type: Sequelize.STRING },\n    password: { type: Sequelize.STRING },\n    otp: { type: Sequelize.STRING },\n    otp_count: { type: Sequelize.INTEGER(11), allowNull: false, defaultValue: 0 },\n    contact_person: { type: Sequelize.STRING, allowNull: false },\n    contact_person_phone: { type: Sequelize.STRING, allowNull: false },\n    product: { type: Sequelize.STRING },\n    photo: { type: Sequelize.STRING },\n    address: { type: Sequelize.STRING },\n    country_iso2: { type: Sequelize.STRING(2), allowNull: false },\n    packages: { type: Sequelize.STRING, defaultValue: false },\n    is_phone_verified: { type: Sequelize.BOOLEAN, defaultValue: false },\n    is_email_verified: { type: Sequelize.BOOLEAN, defaultValue: false },\n    remark: { type: Sequelize.STRING },\n    created_by: { type: Sequelize.INTEGER(11), allowNull: false },\n    updated_by: { type: Sequelize.INTEGER(11) },\n};\n\nconst options = {\n    timestamps: true,\n    paranoid: true,\n    underscored: true,\n    freezeTableName: true,\n};\nconst Talent = sequelize.define(\"talent\", schema, options);\nsequelize.sync()\n    .then(() => Talent.sync({ force }).then(() => Talent.bulkCreate(table)));\n    \nexport default Talent;"]}