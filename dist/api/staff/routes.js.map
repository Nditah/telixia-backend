{"version":3,"sources":["../../../src/api/staff/routes.js"],"names":["router","express","Router","get","checkAuth","isValidAdmin","fetchRecord","post","createRecord","put","updateRecord","delete","deleteRecord","login"],"mappings":";;;;;;AAIA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;;AAVA;;;;AA0BAF,OAAOG,GAAP,CAAW,QAAX,EAAqB,CAACC,wBAAD,EAAYC,2BAAZ,CAArB,EAAgDC,uBAAhD;;AAEA;;;;;;;;;;;;;AAaAN,OAAOO,IAAP,CAAY,QAAZ,EAAsB,CAACH,wBAAD,EAAYC,2BAAZ,CAAtB,EAAiDG,wBAAjD;;AAEA;;;;;;;;;;;;;;AAcAR,OAAOS,GAAP,CAAW,kBAAX,EAA+B,CAACL,wBAAD,EAAYC,2BAAZ,CAA/B,EAA0DK,wBAA1D;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,kBAAd,EAAkC,CAACP,wBAAD,EAAYC,2BAAZ,CAAlC,EAA6DO,wBAA7D;;AAEA;;;;;;;;;;;;AAYAZ,OAAOO,IAAP,CAAY,cAAZ,EAA4BM,iBAA5B;;kBAEeb,M","file":"routes.js","sourcesContent":["/**\n * @author 4Decoder\n * @description Admin holds record of all admin with terminals\n */\nimport express from \"express\";\nimport { checkAuth, isValidAdmin } from \"../../middleware/authorization\";\nimport { fetchRecord, createRecord, updateRecord, deleteRecord, login } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/admin?id={recordId} Retrieve one or all records\n * @apiName RetrieveAdmin\n * @apiGroup Admin\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i http://localhost/api/admin?id=2&fields=id,created_at,updated_at\n * @apiExample {curl} Example usage for retieving multiple records:\n *      curl -i http://localhost/api/admin?offset=10&limit=50\n * @apiParam {Number} id Unique id of the record to retrieve (optional)\n * @apiParam {Number} offset Number of records to skip (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} fields Comma-separated list of record's attributes to retrieve (optional)\n * @apiDescription Records of admin distributed across terminals.\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/admin\", [checkAuth, isValidAdmin], fetchRecord);\n\n/**\n * @api {post} /api/admin Create admin\n * @apiName CreateAdmin\n * @apiGroup Admin\n * @apiParam {String} access_token master access token.\n * @apiParam {Integer} id Admin primaryKey\n * @apiParam {Integer} created_by Admin record created by\n * @apiParam {Number} created_by Admin record created by\n * @apiSuccess {Object} Admin Admin's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Admin not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/admin\", [checkAuth, isValidAdmin], createRecord);\n\n/**\n * @api {put} /api/admin/{recordId} Update admin\n * @apiName UpdateAdmin\n * @apiGroup Admin\n * @apiPermission master\n * @apiParam {String} access_token master access token.\n * @apiParam {Number} recordId Admin record id (primaryKey)\n * @apiParam {String} name Admin short name\n * @apiParam {Number} updated_by Admin record modified by\n * @apiSuccess {Object} Admin Admin's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Admin not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/admin/:recordId\", [checkAuth, isValidAdmin], updateRecord);\n\n/**\n * @api {delete} /api/admin/{recordId} Delete admin\n * @apiName DeleteAdmin\n * @apiGroup Admin\n * @apiPermission master\n * @apiParam {String} access_token master access token.\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Admin not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/admin/:recordId\", [checkAuth, isValidAdmin], deleteRecord);\n\n/**\n * @api {post} /api/admin/login Login Admin\n * @apiName LoginAdmin\n * @apiGroup Admin\n * @apiPermission master\n * @apiParam {String} email Admin email address (optional)\n * @apiParam {String} password Admin password (optional)\n * @apiParam {String} office_phone Admin official phone number (optional)\n * @apiParam {String} otp Admin One-Time-Password sent to phone (optional)\n * @apiSuccess (Success 200) 200 Login Successful.\n * @apiError 404 Admin not found.\n */\nrouter.post(\"/admin/login\", login);\n\nexport default router;\n"]}