{"version":3,"sources":["../../../src/api/bank/model.js"],"names":["Sequelize","force","DATABASE","DROP_TABLE_IF_EXIST","FALSE","schemaFetch","id","Joi","number","optional","offset","limit","fields","string","schemaCreate","name","trim","required","sort_code","bank_code","country_iso2","contact_person","website","created_by","schemaUpdate","updated_by","schema","type","INTEGER","primaryKey","autoIncrement","STRING","allowNull","defaultValue","options","timestamps","paranoid","underscored","freezeTableName","Bank","sequelize","define","sync","then","bulkCreate","table"],"mappings":";;;;;;;AAWA;;;;AACA;;IAAYA,S;;AACZ;;;;AACA;;;;AACA;;;;;;AAEA,IAAMC,QAAQC,oBAASC,mBAAT,CAA6BC,KAA3C,C,CAjBA;;;;;;;;;;;AAmBO,IAAMC,oCAAc;AACvBC,QAAIC,cAAIC,MAAJ,GAAaC,QAAb,EADmB;AAEvBC,YAAQH,cAAIC,MAAJ,GAAaC,QAAb,EAFe;AAGvBE,WAAOJ,cAAIC,MAAJ,GAAaC,QAAb,EAHgB;AAIvBG,YAAQL,cAAIM,MAAJ,GAAaJ,QAAb;AAJe,CAApB;;AAOA,IAAMK,sCAAe;AACxBC,UAAMR,cAAIM,MAAJ,GAAaG,IAAb,GAAoBC,QAApB,EADkB;AAExBC,eAAWX,cAAIM,MAAJ,GAAaG,IAAb,GAAoBC,QAApB,EAFa;AAGxBE,eAAWZ,cAAIM,MAAJ,GAAaI,QAAb,EAHa;AAIxBG,kBAAcb,cAAIM,MAAJ,GAAaJ,QAAb,EAJU;AAKxBY,oBAAgBd,cAAIM,MAAJ,GAAaJ,QAAb,EALQ;AAMxBa,aAASf,cAAIM,MAAJ,GAAaJ,QAAb,EANe;AAOxBc,gBAAYhB,cAAIC,MAAJ,GAAaS,QAAb;AAPY,CAArB;;AAUA,IAAMO,sCAAe;AACxBT,UAAMR,cAAIM,MAAJ,GAAaG,IAAb,GAAoBP,QAApB,EADkB;AAExBS,eAAWX,cAAIM,MAAJ,GAAaG,IAAb,GAAoBP,QAApB,EAFa;AAGxBU,eAAWZ,cAAIM,MAAJ,GAAaJ,QAAb,EAHa;AAIxBW,kBAAcb,cAAIM,MAAJ,GAAaJ,QAAb,EAJU;AAKxBY,oBAAgBd,cAAIM,MAAJ,GAAaJ,QAAb,EALQ;AAMxBa,aAASf,cAAIM,MAAJ,GAAaJ,QAAb,EANe;AAOxBgB,gBAAYlB,cAAIC,MAAJ,GAAaS,QAAb;AAPY,CAArB;;AAUA,IAAMS,0BAAS;AAClBpB,QAAI,EAAEqB,MAAM3B,UAAU4B,OAAV,CAAkB,EAAlB,CAAR,EAA+BC,YAAY,IAA3C,EAAiDC,eAAe,IAAhE,EADc;AAElBf,UAAM,EAAEY,MAAM3B,UAAU+B,MAAlB,EAA0BC,WAAW,KAArC,EAFY;AAGlBd,eAAW,EAAES,MAAM3B,UAAU+B,MAAV,CAAiB,EAAjB,CAAR,EAA8BC,WAAW,KAAzC,EAHO;AAIlBb,eAAW,EAAEQ,MAAM3B,UAAU4B,OAAV,CAAkB,EAAlB,CAAR,EAA+BI,WAAW,KAA1C,EAJO;AAKlBZ,kBAAc,EAAEO,MAAM3B,UAAU+B,MAAV,CAAiB,CAAjB,CAAR,EAA6BC,WAAW,KAAxC,EAA+CC,cAAc,IAA7D,EALI;AAMlBZ,oBAAgB,EAAEM,MAAM3B,UAAU+B,MAAlB,EANE;AAOlBT,aAAS,EAAEK,MAAM3B,UAAU+B,MAAlB,EAPS;AAQlBR,gBAAY,EAAEI,MAAM3B,UAAU4B,OAAV,CAAkB,EAAlB,CAAR,EAA+BI,WAAW,KAA1C,EARM;AASlBP,gBAAY,EAAEE,MAAM3B,UAAU4B,OAAV,CAAkB,EAAlB,CAAR;AATM,CAAf;;AAYP,IAAMM,UAAU;AACZC,gBAAY,IADA;AAEZC,cAAU,IAFE;AAGZC,iBAAa,IAHD;AAIZC,qBAAiB;AAJL,CAAhB;AAMA,IAAMC,OAAOC,oBAAUC,MAAV,CAAiB,MAAjB,EAAyBf,MAAzB,EAAiCQ,OAAjC,CAAb;AACAM,oBAAUE,IAAV,GACKC,IADL,CACU;AAAA,WAAMJ,KAAKG,IAAL,CAAU,EAAEzC,YAAF,EAAV,EAAqB0C,IAArB,CAA0B;AAAA,eAAMJ,KAAKK,UAAL,CAAgBC,eAAhB,CAAN;AAAA,KAA1B,CAAN;AAAA,CADV;;kBAGeN,I","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {Number} id bank primaryKey\n * @property {String} name Bank full name (required)\n * @property {String} sort_code Bank sort_code (required)\n * @property {String} bank_code Bank bank_code (required)\n * @property {String} country_iso2 Bank country_iso2 (optional)\n * @property {String} contact_person Bank contact_person (optional)\n * @property {String} website Bank website (optional)\n * @description Bank model holds record of all banks the company deals with\n */\nimport Joi from \"joi\";\nimport * as Sequelize from \"sequelize\";\nimport sequelize from \"../../config/sequelize\";\nimport table from \"./table\";\nimport { DATABASE } from \"../../constants\";\n\nconst force = DATABASE.DROP_TABLE_IF_EXIST.FALSE;\n\nexport const schemaFetch = {\n    id: Joi.number().optional(),\n    offset: Joi.number().optional(),\n    limit: Joi.number().optional(),\n    fields: Joi.string().optional(),\n};\n\nexport const schemaCreate = {\n    name: Joi.string().trim().required(),\n    sort_code: Joi.string().trim().required(),\n    bank_code: Joi.string().required(),\n    country_iso2: Joi.string().optional(),\n    contact_person: Joi.string().optional(),\n    website: Joi.string().optional(),\n    created_by: Joi.number().required(),\n};\n\nexport const schemaUpdate = {\n    name: Joi.string().trim().optional(),\n    sort_code: Joi.string().trim().optional(),\n    bank_code: Joi.string().optional(),\n    country_iso2: Joi.string().optional(),\n    contact_person: Joi.string().optional(),\n    website: Joi.string().optional(),\n    updated_by: Joi.number().required(),\n};\n\nexport const schema = {\n    id: { type: Sequelize.INTEGER(11), primaryKey: true, autoIncrement: true },\n    name: { type: Sequelize.STRING, allowNull: false },\n    sort_code: { type: Sequelize.STRING(11), allowNull: false },\n    bank_code: { type: Sequelize.INTEGER(11), allowNull: false },\n    country_iso2: { type: Sequelize.STRING(2), allowNull: false, defaultValue: \"ng\" },\n    contact_person: { type: Sequelize.STRING },\n    website: { type: Sequelize.STRING },\n    created_by: { type: Sequelize.INTEGER(11), allowNull: false },\n    updated_by: { type: Sequelize.INTEGER(11) },\n};\n\nconst options = {\n    timestamps: true,\n    paranoid: true,\n    underscored: true,\n    freezeTableName: true,\n};\nconst Bank = sequelize.define(\"bank\", schema, options);\nsequelize.sync()\n    .then(() => Bank.sync({ force }).then(() => Bank.bulkCreate(table)));\n    \nexport default Bank;\n"]}