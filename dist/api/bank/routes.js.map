{"version":3,"sources":["../../../src/api/bank/routes.js"],"names":["router","express","Router","get","checkAuth","isValidAdmin","fetchRecord","post","createRecord","put","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAIA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;;AAVA;;;;AA0BAF,OAAOG,GAAP,CAAW,QAAX,EAAqB,CAACC,wBAAD,EAAYC,2BAAZ,CAArB,EAAgDC,uBAAhD;;AAEA;;;;;;;;;;;;;;;;AAgBAN,OAAOO,IAAP,CAAY,QAAZ,EAAsB,CAACH,wBAAD,EAAYC,2BAAZ,CAAtB,EAAiDG,wBAAjD;;AAEA;;;;;;;;;;;;;;;;;AAiBAR,OAAOS,GAAP,CAAW,kBAAX,EAA+B,CAACL,wBAAD,EAAYC,2BAAZ,CAA/B,EAA0DK,wBAA1D;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,kBAAd,EAAkC,CAACP,wBAAD,EAAYC,2BAAZ,CAAlC,EAA6DO,wBAA7D;;kBAEeZ,M","file":"routes.js","sourcesContent":["/**\n * @author 4Decoder\n * @description Bank holds record of all banks with terminals\n */\nimport express from \"express\";\nimport { checkAuth, isValidAdmin } from \"../../middleware/authorization\";\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/banks?id={recordId} Retrieve one or all records\n * @apiName RetrieveBank\n * @apiGroup Bank\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i http://localhost/api/banks?id=2&fields=id,created_at,updated_at\n * @apiExample {curl} Example usage for retieving multiple records:\n *      curl -i http://localhost/api/banks?offset=10&limit=50\n * @apiParam {Number} id Unique id of the record to retrieve (optional)\n * @apiParam {Number} offset Number of records to skip (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} fields Comma-separated list of record's attributes to retrieve (optional)\n * @apiDescription Records  of Corporate commercial banks operating Groups bank account(s)\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/banks\", [checkAuth, isValidAdmin], fetchRecord);\n\n/**\n * @api {post} /api/banks Create banks\n * @apiName CreateBank\n * @apiGroup Bank\n * @apiParam {String} access_token master access token.\n * @apiParam {String} name Bank full name (required)\n * @apiParam {String} sort_code Bank sort_code (required)\n * @apiParam {String} bank_code Bank bank_code (required)\n * @apiParam {String} country_iso2 Bank country_iso2 (optional)\n * @apiParam {String} contact_person Bank contact_person (optional)\n * @apiParam {String} website Bank website (optional)\n * @apiSuccess {Object} Bank Bank's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Bank not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/banks\", [checkAuth, isValidAdmin], createRecord);\n\n/**\n * @api {put} /api/banks/{recordId} Update banks\n * @apiName UpdateBank\n * @apiGroup Bank\n * @apiPermission master\n * @apiParam {String} access_token master access token.\n * @apiParam {String} name Bank full name (required)\n * @apiParam {String} sort_code Bank sort_code (required)\n * @apiParam {String} bank_code Bank bank_code (required)\n * @apiParam {String} country_iso2 Bank country_iso2 (optional)\n * @apiParam {String} contact_person Bank contact_person (optional)\n * @apiParam {String} website Bank website (optional)\n * @apiSuccess {Object} Bank Bank's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Bank not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/banks/:recordId\", [checkAuth, isValidAdmin], updateRecord);\n\n/**\n * @api {delete} /api/banks/{recordId} Delete banks\n * @apiName DeleteBank\n * @apiGroup Bank\n * @apiPermission master\n * @apiParam {String} access_token master access token.\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Bank not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/banks/:recordId\", [checkAuth, isValidAdmin], deleteRecord);\n\nexport default router;\n"]}