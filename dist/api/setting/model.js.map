{"version":3,"sources":["../../../src/api/setting/model.js"],"names":["Sequelize","force","DATABASE","DROP_TABLE_IF_EXIST","FALSE","schemaFetch","id","Joi","number","optional","offset","limit","fields","string","schemaCreate","name","trim","required","value","category","description","schemaUpdate","updated_by","schema","type","INTEGER","primaryKey","autoIncrement","STRING","allowNull","options","timestamps","paranoid","underscored","freezeTableName","Setting","sequelize","define","sync","then","bulkCreate","table"],"mappings":";;;;;;;AASA;;;;AACA;;IAAYA,S;;AACZ;;;;AACA;;AACA;;;;;;;;AAEA,IAAMC,QAAQC,oBAASC,mBAAT,CAA6BC,KAA3C,C,CAfA;;;;;;;;;AAiBO,IAAMC,oCAAc;AACvBC,QAAIC,cAAIC,MAAJ,GAAaC,QAAb,EADmB;AAEvBC,YAAQH,cAAIC,MAAJ,GAAaC,QAAb,EAFe;AAGvBE,WAAOJ,cAAIC,MAAJ,GAAaC,QAAb,EAHgB;AAIvBG,YAAQL,cAAIM,MAAJ,GAAaJ,QAAb;AAJe,CAApB;;AAOA,IAAMK,sCAAe;AACxBC,UAAMR,cAAIM,MAAJ,GAAaG,IAAb,GAAoBC,QAApB,EADkB;AAExBC,WAAOX,cAAIM,MAAJ,GAAaG,IAAb,GAAoBC,QAApB,EAFiB;AAGxBE,cAAUZ,cAAIM,MAAJ,GAAaJ,QAAb,EAHc;AAIxBW,iBAAab,cAAIM,MAAJ,GAAaI,QAAb;AAJW,CAArB;;AAOA,IAAMI,sCAAe;AACxBN,UAAMR,cAAIM,MAAJ,GAAaG,IAAb,GAAoBP,QAApB,EADkB;AAExBS,WAAOX,cAAIM,MAAJ,GAAaG,IAAb,GAAoBP,QAApB,EAFiB;AAGxBU,cAAUZ,cAAIM,MAAJ,GAAaJ,QAAb,EAHc;AAIxBW,iBAAab,cAAIM,MAAJ,GAAaJ,QAAb,EAJW;AAKxBa,gBAAYf,cAAIC,MAAJ,GAAaS,QAAb;AALY,CAArB;;AAQP,IAAMM,SAAS;AACXjB,QAAI,EAAEkB,MAAMxB,UAAUyB,OAAV,CAAkB,EAAlB,CAAR,EAA+BC,YAAY,IAA3C,EAAiDC,eAAe,IAAhE,EADO;AAEXZ,UAAM,EAAES,MAAMxB,UAAU4B,MAAlB,EAA0BC,WAAW,KAArC,EAFK;AAGXX,WAAO,EAAEM,MAAMxB,UAAU4B,MAAlB,EAA0BC,WAAW,KAArC,EAHI;AAIXV,cAAU,EAAEK,MAAMxB,UAAU4B,MAAlB,EAJC;AAKXR,iBAAa,EAAEI,MAAMxB,UAAU4B,MAAlB,EAA0BC,WAAW,KAArC,EALF;AAMXP,gBAAY,EAAEE,MAAMxB,UAAUyB,OAAV,CAAkB,EAAlB,CAAR;AAND,CAAf;;AAUA,IAAMK,UAAU;AACZC,gBAAY,IADA;AAEZC,cAAU,IAFE;AAGZC,iBAAa,IAHD;AAIZC,qBAAiB;AAJL,CAAhB;AAMA,IAAMC,UAAUC,oBAAUC,MAAV,CAAiB,SAAjB,EAA4Bd,MAA5B,EAAoCO,OAApC,CAAhB;AACAM,oBAAUE,IAAV,GACKC,IADL,CACU;AAAA,WAAMJ,QAAQG,IAAR,CAAa,EAAErC,YAAF,EAAb,EAAwBsC,IAAxB,CAA6B;AAAA,eAAMJ,QAAQK,UAAR,CAAmBC,eAAnB,CAAN;AAAA,KAA7B,CAAN;AAAA,CADV;;kBAGeN,O","file":"model.js","sourcesContent":["/**\n * @author 4Decoder\n * @property {Number} id Setting primaryKey\n * @property {String} name Setting varaible name\n * @property {String} category Setting category of domains affected\n * @property {String} value Setting value value\n * @property {String} description Setting description\n * @description Setting holds record of all cities with terminals\n */\nimport Joi from \"joi\";\nimport * as Sequelize from \"sequelize\";\nimport sequelize from \"../../config/sequelize\";\nimport { DATABASE } from \"../../constants\";\nimport table from \"./table\";\n\nconst force = DATABASE.DROP_TABLE_IF_EXIST.FALSE;\n\nexport const schemaFetch = {\n    id: Joi.number().optional(),\n    offset: Joi.number().optional(),\n    limit: Joi.number().optional(),\n    fields: Joi.string().optional(),\n};\n\nexport const schemaCreate = {\n    name: Joi.string().trim().required(),\n    value: Joi.string().trim().required(),\n    category: Joi.string().optional(),\n    description: Joi.string().required(),\n};\n\nexport const schemaUpdate = {\n    name: Joi.string().trim().optional(),\n    value: Joi.string().trim().optional(),\n    category: Joi.string().optional(),\n    description: Joi.string().optional(),\n    updated_by: Joi.number().required(),\n};\n\nconst schema = {\n    id: { type: Sequelize.INTEGER(11), primaryKey: true, autoIncrement: true },\n    name: { type: Sequelize.STRING, allowNull: false },\n    value: { type: Sequelize.STRING, allowNull: false },\n    category: { type: Sequelize.STRING },\n    description: { type: Sequelize.STRING, allowNull: false },\n    updated_by: { type: Sequelize.INTEGER(11) },\n};\n\n\nconst options = {\n    timestamps: true,\n    paranoid: true,\n    underscored: true,\n    freezeTableName: true,\n};\nconst Setting = sequelize.define(\"setting\", schema, options);\nsequelize.sync()\n    .then(() => Setting.sync({ force }).then(() => Setting.bulkCreate(table)));\n    \nexport default Setting;"]}