{"version":3,"sources":["../../../src/api/setting/routes.js"],"names":["router","express","Router","get","fetchRecord","post","checkAuth","isValidStaff","createRecord","put","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAIA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;;;AAVA;;;;AA2BAF,OAAOG,GAAP,CAAW,WAAX,EAAwBC,uBAAxB;;AAEA;;;;;;;;;;;;;;;AAeAJ,OAAOK,IAAP,CAAY,WAAZ,EAAyB,CAACC,wBAAD,EAAYC,2BAAZ,CAAzB,EAAoDC,wBAApD;;AAEA;;;;;;;;;;;;;;;;;AAiBAR,OAAOS,GAAP,CAAW,qBAAX,EAAkC,CAACH,wBAAD,EAAYC,2BAAZ,CAAlC,EAA6DG,wBAA7D;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,qBAAd,EAAqC,CAACL,wBAAD,EAAYC,2BAAZ,CAArC,EAAgEK,wBAAhE;;kBAEeZ,M","file":"routes.js","sourcesContent":["/**\n * @author 4Decoder\n * @description Setting holds record of all settings with terminals\n */\nimport express from \"express\";\nimport { checkAuth, isValidStaff } from \"../../middleware/authorization\";\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/settings?id={recordId} Retrieve one or all records\n * @apiName RetrieveSetting\n * @apiGroup Setting\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i http://localhost/api/settings?id=2&fields=id,created_at,updated_at\n * @apiExample {curl} Example usage for retieving multiple records:\n *      curl -i http://localhost/api/settings?offset=10&limit=50\n * @apiParam {Number} id Unique id of the record to retrieve (optional)\n * @apiParam {Number} offset Number of records to skip (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} fields Comma-separated list of record's attributes to retrieve (optional)\n * @apiDescription Records of Software adjustable and default parameters.\n * Labels and contents for the website are kept here.\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/settings\", fetchRecord);\n\n/**\n * @api {post} /api/settings Create settings\n * @apiName CreateSetting\n * @apiGroup Setting\n * @apiParam {String} access_token master access token.\n * @apiParam {Number} id Setting primaryKey\n * @apiParam {String} name Setting varaible name\n * @apiParam {String} category Setting category of domains affected\n * @apiParam {String} control Setting control value\n * @apiParam {String} description Setting description\n * @apiSuccess {Object} Setting Setting's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Setting not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/settings\", [checkAuth, isValidStaff], createRecord);\n\n/**\n * @api {put} /api/settings/{recordId} Update settings\n * @apiName UpdateSetting\n * @apiGroup Setting\n * @apiPermission master\n * @apiParam {String} access_token master access token.\n * @apiParam {Number} recordId Setting record id (primaryKey)\n * @apiParam {String} name Setting varaible name\n * @apiParam {String} category Setting category of domains affected\n * @apiParam {String} control Setting control value\n * @apiParam {String} description Setting description\n * @apiParam {Number} updated_by Setting record modified by\n * @apiSuccess {Object} Setting Setting's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Setting not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/settings/:recordId\", [checkAuth, isValidStaff], updateRecord);\n\n/**\n * @api {delete} /api/settings/{recordId} Delete settings\n * @apiName DeleteSetting\n * @apiGroup Setting\n * @apiPermission master\n * @apiParam {String} access_token master access token.\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Setting not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/settings/:recordId\", [checkAuth, isValidStaff], deleteRecord);\n\nexport default router;\n"]}