{"version":3,"sources":["../../../src/api/country/model.js"],"names":["Sequelize","force","DATABASE","DROP_TABLE_IF_EXIST","FALSE","schemaFetch","id","Joi","number","optional","offset","limit","fields","string","schemaCreate","name","trim","required","iso2","iso3","callingCodes","currencies","ioc","languages","status","created_by","schemaUpdate","updated_by","schema","type","INTEGER","primaryKey","autoIncrement","STRING","defaultValue","options","timestamps","paranoid","underscored","freezeTableName","Country","sequelize","define","sync","then","bulkCreate","table"],"mappings":"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","file":"model.js","sourcesContent":["/**\n * @author 4Decoder\n * @property {Number} id Country primaryKey\n * @property {String} name Country name\n * @property {String} iso2 Country iso where the state is located\n * @property {String} iso3 Country iso3 (required)\n * @property {String} callingCodes Country callingCodes (required)\n * @property {String} currencies Country currencies (required)\n * @property {String} ioc Country ioc (required)\n * @property {String} languages Country languages (required)\n * @property {String} status Country status (required)\n * @property {Number} created_by Country record created by\n * @property {Number} updated_by Country record modified by\n * @description Country holds record of all cities with terminal_list\n */\nimport Joi from \"joi\";\nimport * as Sequelize from \"sequelize\";\nimport sequelize from \"../../config/sequelize\";\nimport { DATABASE } from \"../../constants\";\nimport table from \"./table\";\n\nconst force = DATABASE.DROP_TABLE_IF_EXIST.FALSE;\n\nexport const schemaFetch = {\n    id: Joi.number().optional(),\n    offset: Joi.number().optional(),\n    limit: Joi.number().optional(),\n    fields: Joi.string().optional(),\n};\n\nexport const schemaCreate = {\n    name: Joi.string().trim().required(),\n    iso2: Joi.string().trim().required(),\n    iso3: Joi.string().trim().required(),\n    callingCodes: Joi.string().required(),\n    currencies: Joi.string().required(),\n    ioc: Joi.string().trim().required(),\n    languages: Joi.string().required(),\n    status: Joi.string().trim().required(),\n    created_by: Joi.number().required(),\n};\n\nexport const schemaUpdate = {\n    name: Joi.string().trim().optional(),\n    iso2: Joi.string().trim().optional(),\n    iso3: Joi.string().trim().optional(),\n    callingCodes: Joi.string().optional(),\n    currencies: Joi.string().optional(),\n    ioc: Joi.string().trim().optional(),\n    languages: Joi.string().optional(),\n    status: Joi.string().trim().optional(),\n    updated_by: Joi.number().required(),\n};\n\nexport const schema = {\n    id: { type: Sequelize.INTEGER(11), primaryKey: true, autoIncrement: true },\n    name: { type: Sequelize.STRING },\n    iso2: { type: Sequelize.STRING },\n    iso3: { type: Sequelize.STRING },\n    callingCodes: { type: Sequelize.STRING },\n    currencies: { type: Sequelize.STRING },\n    ioc: { type: Sequelize.STRING },\n    languages: { type: Sequelize.STRING },\n    status: { type: Sequelize.STRING },\n    created_by: { type: Sequelize.INTEGER(11), defaultValue: 1 },\n    updated_by: { type: Sequelize.INTEGER(11) },\n};\n\nconst options = {\n    timestamps: true,\n    paranoid: true,\n    underscored: true,\n    freezeTableName: true,\n};\nconst Country = sequelize.define(\"country\", schema, options);\nsequelize.sync()\n    .then(() => Country.sync({ force }).then(() => Country.bulkCreate(table)));\n    \nexport default Country;\n"]}