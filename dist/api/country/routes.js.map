{"version":3,"sources":["../../../src/api/country/routes.js"],"names":["router","express","Router","get","fetchRecord","post","checkAuth","isValidStaff","createRecord","put","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAIA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;;AAVA;;;;AA0BAF,OAAOG,GAAP,CAAW,YAAX,EAAyBC,uBAAzB;;AAEA;;;;;;;;;;;;;;;;;;;;AAoBAJ,OAAOK,IAAP,CAAY,YAAZ,EAA0B,CAACC,wBAAD,EAAYC,2BAAZ,CAA1B,EAAqDC,wBAArD;;AAEA;;;;;;;;;;;;;;;;;;;;;AAqBAR,OAAOS,GAAP,CAAW,sBAAX,EAAmC,CAACH,wBAAD,EAAYC,2BAAZ,CAAnC,EAA8DG,wBAA9D;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,sBAAd,EAAsC,CAACL,wBAAD,EAAYC,2BAAZ,CAAtC,EAAiEK,wBAAjE;;kBAEeZ,M","file":"routes.js","sourcesContent":["/**\n * @author 4Decoder\n * @description Country holds record of all countries with terminals\n */\nimport express from \"express\";\nimport { checkAuth, isValidStaff } from \"../../middleware/authorization\";\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/countries?id={recordId} Retrieve one or all records\n * @apiName RetrieveCountry\n * @apiGroup Country\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i http://localhost/api/countries?id=2&fields=id,created_at,updated_at\n * @apiExample {curl} Example usage for retieving multiple records:\n *      curl -i http://localhost/api/countries?offset=10&limit=50\n * @apiParam {Number} id Unique id of the record to retrieve (optional)\n * @apiParam {Number} offset Number of records to skip (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} fields Comma-separated list of record's attributes to retrieve (optional)\n * @apiDescription Records countries of operation\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/countries\", fetchRecord);\n\n/**\n * @api {post} /api/countries Create countries\n * @apiName CreateCountry\n * @apiGroup Country\n * @apiParam {String} access_token master access token.\n * @apiParam {Number} id Country primaryKey\n * @apiParam {String} name Country name\n * @apiParam {String} iso2 Country iso where the state is located\n * @apiParam {String} iso3 Country iso3 (required)\n * @apiParam {String} callingCodes Country callingCodes (required)\n * @apiParam {String} currencies Country currencies (required)\n * @apiParam {String} ioc Country ioc (required)\n * @apiParam {String} languages Country languages (required)\n * @apiParam {String} status Country status (required)\n * @apiParam {Number} created_by Country record created by\n * @apiSuccess {Object} Country Country's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Country not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/countries\", [checkAuth, isValidStaff], createRecord);\n\n/**\n * @api {put} /api/countries/{recordId} Update countries\n * @apiName UpdateCountry\n * @apiGroup Country\n * @apiPermission master\n * @apiParam {String} access_token master access token.\n * @apiParam {Number} recordId Country record id (primaryKey)\n * @apiParam {String} name Country name\n * @apiParam {String} iso2 Country iso where the state is located\n * @apiParam {String} iso3 Country iso3 (required)\n * @apiParam {String} callingCodes Country callingCodes (required)\n * @apiParam {String} currencies Country currencies (required)\n * @apiParam {String} ioc Country ioc (required)\n * @apiParam {String} languages Country languages (required)\n * @apiParam {String} status Country status (required)\n * @apiParam {Number} updated_by Country record modified by\n * @apiSuccess {Object} Country Country's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Country not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/countries/:recordId\", [checkAuth, isValidStaff], updateRecord);\n\n/**\n * @api {delete} /api/countries/{recordId} Delete countries\n * @apiName DeleteCountry\n * @apiGroup Country\n * @apiPermission master\n * @apiParam {String} access_token master access token.\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Country not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/countries/:recordId\", [checkAuth, isValidStaff], deleteRecord);\n\nexport default router;\n"]}