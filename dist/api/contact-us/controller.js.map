{"version":3,"sources":["../../../src/api/contact-us/controller.js"],"names":["req","res","query","Joi","validate","schemaFetch","error","message","id","offset","limit","fields","parseInt","fieldsArray","replace","split","eligibleField","Object","keys","schema","push","attributes","result","forEach","item","includes","options","length","ContactUs","findOne","where","findAll","logger","info","STATUS_MSG","SUCCESS","DEFAULT","fetchRecord","data","body","schemaCreate","create","createRecord","params","recordId","schemaUpdate","findByPk","model","update","updateRecord","destroy","deleteRecord","log4js","getLogger","configure","appenders","file","type","filename","categories","default","level"],"mappings":"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","file":"controller.js","sourcesContent":["/**\n * @author 4Decoder\n * @description ContactUs holds record of all cities with terminals\n */\nimport Joi from \"joi\";\nimport log4js from \"log4js\";\nimport ContactUs, { schemaFetch, schemaCreate, schemaUpdate } from \"./model\";\nimport { success, fail, notFound } from \"../../lib/response\";\nimport { STATUS_MSG } from \"../../constants\";\n\n// Logging\nconst logger = log4js.getLogger(\"[contact-us]\");\nlog4js.configure({\n    appenders: { file: { type: \"file\", filename: \"logs/contact-us.log\" } },\n    categories: { default: { appenders: [\"file\"], level: \"debug\" } },\n});\n\n/**\n * @description fetchRecord() Retrieve  all record(s)\n * @param {Object} req http request object\n * @param {Object} res http request object returns\n */\n// eslint-disable-next-line complexity\nexport async function fetchRecord(req, res) {\n    const { query } = req;\n    const { error } = Joi.validate(query, schemaFetch);\n    if (error) return fail(res, 422, `Error validating request query. ${error.message}`);\n    let { id, offset, limit, fields } = query;\n    id = parseInt(id, 10);\n    offset = parseInt(offset, 10);\n    limit = parseInt(limit, 10);\n    let fieldsArray = [];\n    if (fields && typeof fields === \"string\") {\n        fieldsArray = fields.replace(/\\s+/g, \"\").split(\",\");\n    }\n    const eligibleField = Object.keys(schema);\n    eligibleField.push(\"created_at\", \"updated_at\");\n    const attributes = [];\n    let result;\n    fieldsArray.forEach((item) => {\n        if (eligibleField.includes(item)) attributes.push(item);\n    });\n    const options = {};\n    if (attributes.length > 0) options.attributes = attributes;\n    if (offset >= 0) options.offset = offset;\n    if (limit > 0) options.limit = limit;\n    try {\n        if (id) {\n            if (attributes.length > 0) {\n                result = await ContactUs.findOne({ where: { id }, attributes });\n            } else {\n                result = await ContactUs.findOne({ where: { id } });\n            }\n        } else {\n            result = await ContactUs.findAll(options);\n        }\n        if (!result) {\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n        return success(res, 201, result, null);\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error retrieving record. ${err.message}`);\n    }\n}\n\nexport async function createRecord(req, res) {\n    const data = req.body;\n    const { error } = Joi.validate(data, schemaCreate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const result = await ContactUs.create(data);\n        if (!result) {\n            logger.info(STATUS_MSG.SUCCESS.DEFAULT, []);\n            return notFound(res, \"Error: Bad Request: Model not found\");\n        }\n        return success(res, 201, result, \"Record created successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error creating record. ${err.message}`);\n    }\n}\n\nexport async function updateRecord(req, res) {\n    const data = req.body;\n    const { recordId: id } = req.params;\n    const { error } = Joi.validate(data, schemaUpdate);\n    if (error) return fail(res, 422, `Error validating request data. ${error.message}`);\n    try {\n        const model = await ContactUs.findByPk(id);\n        // const model = await ContactUs.findOne({ where: { id } });\n        if (!model) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        const result = await model.update(data);\n        return success(res, 200, result, \"Record updated successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error updating record. ${err.message}`);\n    }\n}\n\nexport async function deleteRecord(req, res) {\n    const { recordId: id } = req.params;\n    try {\n        const model = await ContactUs.findByPk(id);\n        if (!model) {\n            return notFound(res, `Bad Request: Model not found with id ${id}`);\n        }\n        const result = await model.destroy();\n        return success(res, 200, result, \"Record deleted successfully!\");\n    } catch (err) {\n        logger.error(err);\n        return fail(res, 500, `Error deleting record. ${err.message}`);\n    }\n}\n"]}