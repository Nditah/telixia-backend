{"version":3,"sources":["../../../src/api/client/routes.js"],"names":["router","express","Router","get","checkAuth","isValidAdmin","fetchRecord","post","createRecord","put","updateRecord","delete","deleteRecord","login"],"mappings":";;;;;;AAIA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;;AAVA;;;;AA0BAF,OAAOG,GAAP,CAAW,UAAX,EAAuB,CAACC,wBAAD,EAAYC,2BAAZ,CAAvB,EAAkDC,uBAAlD;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCAN,OAAOO,IAAP,CAAY,UAAZ,EAAwBC,wBAAxB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCAR,OAAOS,GAAP,CAAW,oBAAX,EAAiC,CAACL,wBAAD,CAAjC,EAA8CM,wBAA9C;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,oBAAd,EAAoC,CAACP,wBAAD,EAAYC,2BAAZ,CAApC,EAA+DO,wBAA/D;;AAEA;;;;;;;;;;;;AAYAZ,OAAOO,IAAP,CAAY,gBAAZ,EAA8BM,iBAA9B;;kBAEeb,M","file":"routes.js","sourcesContent":["/**\n * @author 4Decoder\n * @description Client holds record of all clients with terminals\n */\nimport express from \"express\";\nimport { checkAuth, isValidAdmin } from \"../../middleware/authorization\";\nimport { fetchRecord, createRecord, updateRecord, deleteRecord, login } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/clients?id={recordId} Retrieve one or all records\n * @apiName RetrieveClient\n * @apiGroup Client\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i http://localhost/api/clients?id=2&fields=id,created_at,updated_at\n * @apiExample {curl} Example usage for retieving multiple records:\n *      curl -i http://localhost/api/clients?offset=10&limit=50\n * @apiParam {Number} id Unique id of the record to retrieve (optional)\n * @apiParam {Number} offset Number of records to skip (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} fields Comma-separated list of record's attributes to retrieve (optional)\n * @apiDescription Records of consolidated list of clients from PMT, PML, PET, Shop etc\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/clients\", [checkAuth, isValidAdmin], fetchRecord);\n\n/**\n * @api {post} /api/clients Create clients\n * @apiName CreateClient\n * @apiGroup Client\n * @apiParam {String} access_token master access token.\n * @apiParam {Number} id Client primaryKey\n * @apiParam {String} client type \"INDIVIDUAL\", \"ORGANIZATION\"\n * @apiParam {String} title\n * @apiParam {String} surname Client surname (required)\n * @apiParam {String} other_name Client other name (required)\n * @apiParam {String} gender Client gender (required)\n * @apiParam {String} phone Client phone number (required)\n * @apiParam {String} phone2 Client mobile work or home phone number\n * @apiParam {String} email Client email address\n * @apiParam {String} password Client password for accessing the App\n * @apiParam {String} contact_person Client next-of-kin, or contact person\n * @apiParam {String} contact_person_phone Client next-of-kin, or contact person phone\n * @apiParam {String} product Client products of services of interest\n * @apiParam {String} photo Client photo url\n * @apiParam {String} address Client residential or work address\n * @apiParam {String} country_iso2 Client country of residence (required)\n * @apiParam {String} services Client rendred to the client\n * @apiParam {Boolean} is_phone_verified phone verification status\n * @apiParam {Boolean} is_email_verified email verification status\n * @apiParam {String} remark comment about client\n * @apiParam {Number} created_by (required) id of the staff who created the record\n * @apiParam {Number} updated_by id of the staff who created the record\n * @apiSuccess {Object} Client Client's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Client not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/clients\", createRecord);\n\n/**\n * @api {put} /api/clients/{recordId} Update clients\n * @apiName UpdateClient\n * @apiGroup Client\n * @apiPermission master\n * @apiParam {String} access_token master access token.\n * @apiParam {String} access_token master access token.\n * @apiParam {Number} id Client primaryKey\n * @apiParam {String} client type \"INDIVIDUAL\", \"ORGANIZATION\"\n * @apiParam {String} title\n * @apiParam {String} surname Client surname (required)\n * @apiParam {String} other_name Client other name (required)\n * @apiParam {String} gender Client gender (required)\n * @apiParam {String} phone Client phone number (required)\n * @apiParam {String} phone2 Client mobile work or home phone number\n * @apiParam {String} email Client email address\n * @apiParam {String} password Client password for accessing the App\n * @apiParam {String} contact_person Client next-of-kin, or contact person\n * @apiParam {String} contact_person_phone Client next-of-kin, or contact person phone\n * @apiParam {String} product Client products of services of interest\n * @apiParam {String} photo Client photo url\n * @apiParam {String} address Client residential or work address\n * @apiParam {String} country_iso2 Client country of residence (required)\n * @apiParam {String} services Client rendred to the client\n * @apiParam {Boolean} is_phone_verified phone verification status\n * @apiParam {Boolean} is_email_verified email verification status\n * @apiParam {String} remark comment about client\n * @apiParam {Number} created_by (required) id of the staff who created the record\n * @apiParam {Number} updated_by id of the staff who created the record\n * @apiSuccess {Object} Client Client's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Client not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/clients/:recordId\", [checkAuth], updateRecord);\n\n/**\n * @api {delete} /api/clients/{recordId} Delete clients\n * @apiName DeleteClient\n * @apiGroup Client\n * @apiPermission master\n * @apiParam {String} access_token master access token.\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Client not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/clients/:recordId\", [checkAuth, isValidAdmin], deleteRecord);\n\n/**\n * @api {post} /api/clients/login Login Client\n * @apiName LoginClient\n * @apiGroup Client\n * @apiPermission master\n * @apiParam {String} email Client email address (optional)\n * @apiParam {String} password Client password (optional)\n * @apiParam {String} phone Client mobile phone number (optional)\n * @apiParam {String} otp Client One-Time-Password sent to phone (optional)\n * @apiSuccess (Success 200) 200 Login Successful.\n * @apiError 404 Client not found.\n */\nrouter.post(\"/clients/login\", login);\n\nexport default router;\n"]}