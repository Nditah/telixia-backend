{"version":3,"sources":["../../../src/api/client/model.js"],"names":["Sequelize","force","DATABASE","DROP_TABLE_IF_EXIST","FALSE","schemaLogin","email","Joi","string","optional","phone","otp","password","schemaFetch","id","number","offset","limit","fields","schemaCreate","client_type","trim","required","title","surname","other_name","gender","birth_date","date","otp_count","contact_person","contact_person_phone","product","photo","address","country_iso2","is_pmt_client","boolean","is_pesl_client","is_pet_client","is_shop_client","is_tenant","is_phone_verified","is_email_verified","remark","created_by","schemaUpdate","updated_by","schema","type","INTEGER","primaryKey","autoIncrement","ENUM","CUSTOMER_TYPE","INDIVIDUAL","ORGANIZATION","defaultValue","allowNull","STRING","GENDER","MALE","FEMALE","DATEONLY","BOOLEAN","options","timestamps","paranoid","underscored","freezeTableName","Client","sequelize","define","sync","then","bulkCreate","table"],"mappings":"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","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {Number} id Client primaryKey\n * @property {String} client type \"INDIVIDUAL\", \"ORGANIZATION\"\n * @property {String} title\n * @property {String} surname Client surname (required)\n * @property {String} other_name Client other name (required)\n * @property {String} gender Client gender (required)\n * @property {Date} birth_date Client date of birth\n * @property {String} phone Client phone number (required)\n * @property {String} email Client email address\n * @property {String} password Client password for accessing the App\n * @property {String} otp Client one-time-password for accessing the App\n * @property {Number} otp_count Number of times OTP has been used without successful transaction\n * @property {String} contact_person Client next-of-kin, or contact person\n * @property {String} contact_person_phone Client next-of-kin, or contact person phone\n * @property {String} product Client products of services of interest\n * @property {String} photo Client photo url\n * @property {String} address Client residential or work address\n * @property {String} country_iso2 Client country of residence (required)\n * @property {Boolean} is_pmt_client assert that client is also a PMT client\n * @property {Boolean} is_pesl_client assert that client is also a PESL client\n * @property {Boolean} is_pet_client assert that client is also a PET client\n * @property {Boolean} is_shop_client assert that client is also a SHOP client\n * @property {Boolean} is_tenant assert if client is a depot tenant\n * @property {Boolean} is_phone_verified phone verification status\n * @property {Boolean} is_email_verified email verification status\n * @property {String} remark comment about client\n * @property {Number} created_by (required) id of the staff who created the record\n * @property {Number} updated_by id of the staff who created the record\n * @description Records of all company clients.\n */\nimport Joi from \"joi\";\nimport * as Sequelize from \"sequelize\";\nimport sequelize from \"../../config/sequelize\";\nimport { DATABASE, GENDER, CUSTOMER_TYPE } from \"../../constants\";\nimport table from \"./table\";\n\nconst force = DATABASE.DROP_TABLE_IF_EXIST.FALSE;\n\nexport const schemaLogin = {\n    email: Joi.string().optional(),\n    phone: Joi.string().optional(),\n    otp: Joi.string().optional(),\n    password: Joi.string().optional(),\n};\n\nexport const schemaFetch = {\n    id: Joi.number().optional(),\n    offset: Joi.number().optional(),\n    limit: Joi.number().optional(),\n    fields: Joi.string().optional(),\n};\n\nexport const schemaCreate = {\n    client_type: Joi.string().trim().required(),\n    title: Joi.string().optional(),\n    surname: Joi.string().required(),\n    other_name: Joi.string().required(),\n    gender: Joi.string().required(),\n    birth_date: Joi.date().optional(),\n    phone: Joi.string().required(),\n    email: Joi.string().optional(),\n    password: Joi.string().optional(),\n    otp: Joi.string().optional(),\n    otp_count: Joi.number().optional(),\n    contact_person: Joi.string().required(),\n    contact_person_phone: Joi.string().required(),\n    product: Joi.string().optional(),\n    photo: Joi.string().optional(),\n    address: Joi.string().optional(),\n    country_iso2: Joi.string().trim().required(),\n    is_pmt_client: Joi.boolean().optional(),\n    is_pesl_client: Joi.boolean().optional(),\n    is_pet_client: Joi.boolean().optional(),\n    is_shop_client: Joi.boolean().optional(),\n    is_tenant: Joi.boolean().optional(),\n    is_phone_verified: Joi.boolean().optional(),\n    is_email_verified: Joi.boolean().optional(),\n    remark: Joi.string().optional(),\n    created_by: Joi.number().required(),\n};\n\nexport const schemaUpdate = {\n    client_type: Joi.string().trim().optional(),\n    title: Joi.string().optional(),\n    surname: Joi.string().optional(),\n    other_name: Joi.string().optional(),\n    gender: Joi.string().optional(),\n    birth_date: Joi.date().optional(),\n    phone: Joi.string().optional(),\n    email: Joi.string().optional(),\n    password: Joi.string().optional(),\n    otp: Joi.string().optional(),\n    otp_count: Joi.number().optional(),\n    contact_person: Joi.string().optional(),\n    contact_person_phone: Joi.string().optional(),\n    product: Joi.string().optional(),\n    photo: Joi.string().optional(),\n    address: Joi.string().optional(),\n    country_iso2: Joi.string().trim().optional(),\n    is_pmt_client: Joi.boolean().optional(),\n    is_pesl_client: Joi.boolean().optional(),\n    is_pet_client: Joi.boolean().optional(),\n    is_shop_client: Joi.boolean().optional(),\n    is_tenant: Joi.boolean().optional(),\n    is_phone_verified: Joi.boolean().optional(),\n    is_email_verified: Joi.boolean().optional(),\n    remark: Joi.string().optional(),\n    updated_by: Joi.number().required(),\n};\n\nexport const schema = {\n    id: { type: Sequelize.INTEGER(11), primaryKey: true, autoIncrement: true },\n    client_type: {\n        type: Sequelize.ENUM(CUSTOMER_TYPE.INDIVIDUAL, CUSTOMER_TYPE.ORGANIZATION),\n        defaultValue: CUSTOMER_TYPE.INDIVIDUAL,\n        allowNull: false,\n    },\n    title: { type: Sequelize.STRING },\n    surname: { type: Sequelize.STRING, allowNull: false },\n    other_name: { type: Sequelize.STRING, allowNull: false },\n    gender: {\n        type: Sequelize.ENUM(GENDER.MALE, GENDER.FEMALE),\n        allowNull: false,\n    },\n    birth_date: { type: Sequelize.DATEONLY },\n    phone: { type: Sequelize.STRING, allowNull: false },\n    email: { type: Sequelize.STRING },\n    password: { type: Sequelize.STRING },\n    otp: { type: Sequelize.STRING },\n    otp_count: { type: Sequelize.INTEGER(11), allowNull: false, defaultValue: 0 },\n    contact_person: { type: Sequelize.STRING, allowNull: false },\n    contact_person_phone: { type: Sequelize.STRING, allowNull: false },\n    product: { type: Sequelize.STRING },\n    photo: { type: Sequelize.STRING },\n    address: { type: Sequelize.STRING },\n    country_iso2: { type: Sequelize.STRING(2), allowNull: false },\n    is_pmt_client: { type: Sequelize.BOOLEAN, defaultValue: false },\n    is_pesl_client: { type: Sequelize.BOOLEAN, defaultValue: false },\n    is_pet_client: { type: Sequelize.BOOLEAN, defaultValue: false },\n    is_shop_client: { type: Sequelize.BOOLEAN, defaultValue: false },\n    is_tenant: { type: Sequelize.BOOLEAN, defaultValue: false },\n    is_phone_verified: { type: Sequelize.BOOLEAN, defaultValue: false },\n    is_email_verified: { type: Sequelize.BOOLEAN, defaultValue: false },\n    remark: { type: Sequelize.STRING },\n    created_by: { type: Sequelize.INTEGER(11), allowNull: false },\n    updated_by: { type: Sequelize.INTEGER(11) },\n};\n\nconst options = {\n    timestamps: true,\n    paranoid: true,\n    underscored: true,\n    freezeTableName: true,\n};\nconst Client = sequelize.define(\"client\", schema, options);\nsequelize.sync()\n    .then(() => Client.sync({ force }).then(() => Client.bulkCreate(table)));\n    \nexport default Client;"]}