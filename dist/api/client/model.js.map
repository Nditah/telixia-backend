{"version":3,"sources":["../../../src/api/client/model.js"],"names":["Sequelize","force","DATABASE","DROP_TABLE_IF_EXIST","FALSE","schemaLogin","email","Joi","string","optional","phone","otp","password","schemaFetch","id","number","offset","limit","fields","schemaCreate","client_type","trim","required","title","surname","other_name","gender","otp_count","contact_person","contact_person_phone","product","photo","address","country_iso2","services","is_phone_verified","boolean","is_email_verified","remark","created_by","schemaUpdate","updated_by","schema","type","INTEGER","primaryKey","autoIncrement","ENUM","Object","values","CUSTOMER_TYPE","defaultValue","INDIVIDUAL","allowNull","STRING","GENDER","MALE","FEMALE","BOOLEAN","options","timestamps","paranoid","underscored","freezeTableName","Client","sequelize","define","sync","then","bulkCreate","table"],"mappings":"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","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {Number} id Client primaryKey\n * @property {String} client type \"INDIVIDUAL\", \"ORGANIZATION\"\n * @property {String} title\n * @property {String} surname Client surname (required)\n * @property {String} other_name Client other name (required)\n * @property {String} gender Client gender (required)\n * @property {String} phone Client phone number (required)\n * @property {String} email Client email address\n * @property {String} password Client password for accessing the App\n * @property {String} otp Client one-time-password for accessing the App\n * @property {Number} otp_count Number of times OTP has been used without successful transaction\n * @property {String} contact_person Client next-of-kin, or contact person\n * @property {String} contact_person_phone Client next-of-kin, or contact person phone\n * @property {String} product Client products of services of interest\n * @property {String} photo Client photo url\n * @property {String} address Client residential or work address\n * @property {String} country_iso2 Client country of residence (required)\n * @property {String} services Client services rendered by the company\n * @property {Boolean} is_phone_verified phone verification status\n * @property {Boolean} is_email_verified email verification status\n * @property {String} remark comment about client\n * @property {Number} created_by (required) id of the staff who created the record\n * @property {Number} updated_by id of the staff who created the record\n * @description Records of all company clients.\n */\nimport Joi from \"joi\";\nimport * as Sequelize from \"sequelize\";\nimport sequelize from \"../../config/sequelize\";\nimport { DATABASE, GENDER, CUSTOMER_TYPE } from \"../../constants\";\nimport table from \"./table\";\n\nconst force = DATABASE.DROP_TABLE_IF_EXIST.FALSE;\n\nexport const schemaLogin = {\n    email: Joi.string().optional(),\n    phone: Joi.string().optional(),\n    otp: Joi.string().optional(),\n    password: Joi.string().optional(),\n};\n\nexport const schemaFetch = {\n    id: Joi.number().optional(),\n    offset: Joi.number().optional(),\n    limit: Joi.number().optional(),\n    fields: Joi.string().optional(),\n};\n\nexport const schemaCreate = {\n    client_type: Joi.string().trim().required(),\n    title: Joi.string().optional(),\n    surname: Joi.string().required(),\n    other_name: Joi.string().required(),\n    gender: Joi.string().required(),\n    phone: Joi.string().required(),\n    email: Joi.string().optional(),\n    password: Joi.string().optional(),\n    otp: Joi.string().optional(),\n    otp_count: Joi.number().optional(),\n    contact_person: Joi.string().required(),\n    contact_person_phone: Joi.string().required(),\n    product: Joi.string().optional(),\n    photo: Joi.string().optional(),\n    address: Joi.string().optional(),\n    country_iso2: Joi.string().trim().required(),\n    services: Joi.string().optional(),\n    is_phone_verified: Joi.boolean().optional(),\n    is_email_verified: Joi.boolean().optional(),\n    remark: Joi.string().optional(),\n    created_by: Joi.number().required(),\n};\n\nexport const schemaUpdate = {\n    client_type: Joi.string().trim().optional(),\n    title: Joi.string().optional(),\n    surname: Joi.string().optional(),\n    other_name: Joi.string().optional(),\n    gender: Joi.string().optional(),\n    phone: Joi.string().optional(),\n    email: Joi.string().optional(),\n    password: Joi.string().optional(),\n    otp: Joi.string().optional(),\n    otp_count: Joi.number().optional(),\n    contact_person: Joi.string().optional(),\n    contact_person_phone: Joi.string().optional(),\n    product: Joi.string().optional(),\n    photo: Joi.string().optional(),\n    address: Joi.string().optional(),\n    country_iso2: Joi.string().trim().optional(),\n    services: Joi.string().optional(),\n    is_phone_verified: Joi.boolean().optional(),\n    is_email_verified: Joi.boolean().optional(),\n    remark: Joi.string().optional(),\n    updated_by: Joi.number().required(),\n};\n\nexport const schema = {\n    id: { type: Sequelize.INTEGER(11), primaryKey: true, autoIncrement: true },\n    client_type: {\n        type: Sequelize.ENUM(Object.values(CUSTOMER_TYPE)),\n        defaultValue: CUSTOMER_TYPE.INDIVIDUAL,\n        allowNull: false,\n    },\n    title: { type: Sequelize.STRING },\n    surname: { type: Sequelize.STRING, allowNull: false },\n    other_name: { type: Sequelize.STRING, allowNull: false },\n    gender: {\n        type: Sequelize.ENUM(GENDER.MALE, GENDER.FEMALE),\n        allowNull: false,\n    },\n    phone: { type: Sequelize.STRING, allowNull: false },\n    email: { type: Sequelize.STRING },\n    password: { type: Sequelize.STRING },\n    otp: { type: Sequelize.STRING },\n    otp_count: { type: Sequelize.INTEGER(11), allowNull: false, defaultValue: 0 },\n    contact_person: { type: Sequelize.STRING, allowNull: false },\n    contact_person_phone: { type: Sequelize.STRING, allowNull: false },\n    product: { type: Sequelize.STRING },\n    photo: { type: Sequelize.STRING },\n    address: { type: Sequelize.STRING },\n    country_iso2: { type: Sequelize.STRING(2), allowNull: false },\n    services: { type: Sequelize.STRING, defaultValue: false },\n    is_phone_verified: { type: Sequelize.BOOLEAN, defaultValue: false },\n    is_email_verified: { type: Sequelize.BOOLEAN, defaultValue: false },\n    remark: { type: Sequelize.STRING },\n    created_by: { type: Sequelize.INTEGER(11), allowNull: false },\n    updated_by: { type: Sequelize.INTEGER(11) },\n};\n\nconst options = {\n    timestamps: true,\n    paranoid: true,\n    underscored: true,\n    freezeTableName: true,\n};\nconst Client = sequelize.define(\"client\", schema, options);\nsequelize.sync()\n    .then(() => Client.sync({ force }).then(() => Client.bulkCreate(table)));\n    \nexport default Client;"]}