{"version":3,"sources":["../../../src/api/package/routes.js"],"names":["router","express","Router","get","fetchRecord","post","createRecord","put","updateRecord","delete","deleteRecord"],"mappings":";;;;;;AAIA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;;AAVA;;;;AA0BAF,OAAOG,GAAP,CAAW,WAAX,EAAwBC,uBAAxB;;AAEA;;;;;;;;;;;;;;;AAeAJ,OAAOK,IAAP,CAAY,WAAZ,EAAyBC,wBAAzB;;AAEA;;;;;;;;;;;;;;;;AAgBAN,OAAOO,GAAP,CAAW,qBAAX,EAAkCC,wBAAlC;;AAEA;;;;;;;;;;AAUAR,OAAOS,MAAP,CAAc,qBAAd,EAAqCC,wBAArC;;kBAEeV,M","file":"routes.js","sourcesContent":["/**\n * @author 4Decoder\n * @description Package holds record of all packages with terminals\n */\nimport express from \"express\";\nimport { checkAuth, isValidAdmin } from \"../../middleware/authorization\";\nimport { fetchRecord, createRecord, updateRecord, deleteRecord } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/packages?id={recordId} Retrieve one or all records\n * @apiName RetrievePackage\n * @apiGroup Package\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i http://localhost/api/packages?id=2&fields=id,created_at,updated_at\n * @apiExample {curl} Example usage for retieving multiple records:\n *      curl -i http://localhost/api/packages?offset=10&limit=50\n * @apiParam {Number} id Unique id of the record to retrieve (optional)\n * @apiParam {Number} offset Number of records to skip (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} fields Comma-separated list of record's attributes to retrieve (optional)\n * @apiDescription Records  of Corporate commercial packages operating Groups package account(s)\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/packages\", fetchRecord);\n\n/**\n * @api {post} /api/packages Create packages\n * @apiName CreatePackage\n * @apiGroup Package\n * @apiParam {String} access_token master access token.\n * @apiParam {String} name Package full name (required)\n * @apiParam {String} description Package description (required)\n * @apiParam {Number} duration Package duration (required)\n * @apiParam {Number} cost Package cost (required)\n * @apiParam {Boolean} is_available Package is current availability\n * @apiSuccess {Object} Package Package's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Package not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/packages\", createRecord);\n\n/**\n * @api {put} /api/packages/{recordId} Update packages\n * @apiName UpdatePackage\n * @apiGroup Package\n * @apiPermission master\n * @apiParam {String} access_token master access token.\n * @apiParam {String} name Package full name (required)\n * @apiParam {String} description Package description (required)\n * @apiParam {Number} duration Package duration (required)\n * @apiParam {Number} cost Package cost (required)\n * @apiParam {Boolean} is_available Package is current availability\n * @apiSuccess {Object} Package Package's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Package not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/packages/:recordId\", updateRecord);\n\n/**\n * @api {delete} /api/packages/{recordId} Delete packages\n * @apiName DeletePackage\n * @apiGroup Package\n * @apiPermission master\n * @apiParam {String} access_token master access token.\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Package not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/packages/:recordId\", deleteRecord);\n\nexport default router;\n"]}