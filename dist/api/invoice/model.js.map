{"version":3,"sources":["../../../src/api/invoice/model.js"],"names":["Sequelize","force","DATABASE","DROP_TABLE_IF_EXIST","FALSE","schemaFetch","id","Joi","number","optional","offset","limit","fields","string","schemaCreate","label","serial","remark","created_by","required","schemaUpdate","updated_by","schema","type","INTEGER","primaryKey","autoIncrement","transaction_code","STRING","comment","customer_id","amount","DECIMAL","allowNull","currency","defaultValue","transaction_status","ENUM","description","options","timestamps","paranoid","underscored","freezeTableName","Transaction","sequelize","define","sync","then","bulkCreate","table"],"mappings":";;;;;;;AAMA;;;;AACA;;IAAYA,S;;AACZ;;;;AACA;;AACA;;;;;;;;AAEA,IAAMC,QAAQC,oBAASC,mBAAT,CAA6BC,KAA3C,C,CAZA;;;;;;AAcO,IAAMC,oCAAc;AACvBC,QAAIC,cAAIC,MAAJ,GAAaC,QAAb,EADmB;AAEvBC,YAAQH,cAAIC,MAAJ,GAAaC,QAAb,EAFe;AAGvBE,WAAOJ,cAAIC,MAAJ,GAAaC,QAAb,EAHgB;AAIvBG,YAAQL,cAAIM,MAAJ,GAAaJ,QAAb;AAJe,CAApB;;AAOA,IAAMK,sCAAe;AACxBC,WAAOR,cAAIM,MAAJ,GAAaJ,QAAb,EADiB;AAExBO,YAAQT,cAAIM,MAAJ,GAAaJ,QAAb,EAFgB;AAGxBQ,YAAQV,cAAIM,MAAJ,GAAaJ,QAAb,EAHgB;AAIxBS,gBAAYX,cAAIC,MAAJ,GAAaW,QAAb;AAJY,CAArB;;AAOA,IAAMC,sCAAe;AACxBL,WAAOR,cAAIM,MAAJ,GAAaJ,QAAb,EADiB;AAExBO,YAAQT,cAAIM,MAAJ,GAAaJ,QAAb,EAFgB;AAGxBQ,YAAQV,cAAIM,MAAJ,GAAaJ,QAAb,EAHgB;AAIxBY,gBAAYd,cAAIC,MAAJ,GAAaW,QAAb;AAJY,CAArB;;AAOA,IAAMG,0BAAS;AAClBhB,QAAI,EAAEiB,MAAMvB,UAAUwB,OAAV,CAAkB,EAAlB,CAAR,EAA+BC,YAAY,IAA3C,EAAiDC,eAAe,IAAhE,EADc;AAElBC,sBAAkB,EAAEJ,MAAMvB,UAAU4B,MAAlB,EAA0BC,SAAS,OAAnC,EAFA;AAGlBC,iBAAa,EAAEP,MAAMvB,UAAU4B,MAAlB,EAHK;AAIlBG,YAAQ,EAAER,MAAMvB,UAAUgC,OAAV,CAAkB,EAAlB,EAAsB,CAAtB,CAAR,EAAkCC,WAAW,KAA7C,EAJU;AAKlBC,cAAU,EAAEX,MAAMvB,UAAU4B,MAAlB,EAA0BK,WAAW,KAArC,EAA4CE,cAAc,KAA1D,EALQ;AAMlBC,wBAAoB,EAAEb,MAAMvB,UAAUqC,IAAV,CAAe,SAAf,EAA0B,YAA1B,EAAwC,QAAxC,CAAR,EAA2DF,cAAc,SAAzE,EANF;AAOlBG,iBAAa,EAAEf,MAAMvB,UAAU4B,MAAlB,EAPK;AAQlBV,gBAAY,EAAEK,MAAMvB,UAAUwB,OAAV,CAAkB,EAAlB,CAAR,EAA+BS,WAAW,KAA1C,EAAiDE,cAAc,CAA/D,EARM;AASlBd,gBAAY,EAAEE,MAAMvB,UAAUwB,OAAV,CAAkB,EAAlB,CAAR;AATM,CAAf;;AAYP,IAAMe,UAAU;AACZC,gBAAY,IADA;AAEZC,cAAU,IAFE;AAGZC,iBAAa,IAHD;AAIZC,qBAAiB;AAJL,CAAhB;AAMA,IAAMC,cAAcC,oBAAUC,MAAV,CAAiB,SAAjB,EAA4BxB,MAA5B,EAAoCiB,OAApC,CAApB;AACAM,oBAAUE,IAAV,GACKC,IADL,CACU;AAAA,WAAMJ,YAAYG,IAAZ,CAAiB,EAAE9C,YAAF,EAAjB,EAA4B+C,IAA5B,CAAiC;AAAA,eAAMJ,YAAYK,UAAZ,CAAuBC,eAAvB,CAAN;AAAA,KAAjC,CAAN;AAAA,CADV;;kBAGeN,W","file":"model.js","sourcesContent":["/**\n * @author 4Dcoder\n * @property {Number} id Invoice primaryKey\n * @property {String} label Invoice label\n * @description Invoice model holds record of all Inventories except vehicles\n */\nimport Joi from \"joi\";\nimport * as Sequelize from \"sequelize\";\nimport sequelize from \"../../config/sequelize\";\nimport { DATABASE } from \"../../constants\";\nimport table from \"./table\";\n\nconst force = DATABASE.DROP_TABLE_IF_EXIST.FALSE;\n\nexport const schemaFetch = {\n    id: Joi.number().optional(),\n    offset: Joi.number().optional(),\n    limit: Joi.number().optional(),\n    fields: Joi.string().optional(),\n};\n\nexport const schemaCreate = {\n    label: Joi.string().optional(),\n    serial: Joi.string().optional(),\n    remark: Joi.string().optional(),\n    created_by: Joi.number().required(),\n};\n\nexport const schemaUpdate = {\n    label: Joi.string().optional(),\n    serial: Joi.string().optional(),\n    remark: Joi.string().optional(),\n    updated_by: Joi.number().required(),\n};\n\nexport const schema = {\n    id: { type: Sequelize.INTEGER(11), primaryKey: true, autoIncrement: true },\n    transaction_code: { type: Sequelize.STRING, comment: \"txref\" },\n    customer_id: { type: Sequelize.STRING },\n    amount: { type: Sequelize.DECIMAL(10, 2), allowNull: false },\n    currency: { type: Sequelize.STRING, allowNull: false, defaultValue: \"NGN\" },\n    transaction_status: { type: Sequelize.ENUM(\"PENDING\", \"SUCCESSFUL\", \"FAILED\"), defaultValue: \"PENDING\" },\n    description: { type: Sequelize.STRING },\n    created_by: { type: Sequelize.INTEGER(11), allowNull: false, defaultValue: 1 },\n    updated_by: { type: Sequelize.INTEGER(11) },\n};\n\nconst options = {\n    timestamps: true,\n    paranoid: true,\n    underscored: true,\n    freezeTableName: true,\n};\nconst Transaction = sequelize.define(\"invoice\", schema, options);\nsequelize.sync()\n    .then(() => Transaction.sync({ force }).then(() => Transaction.bulkCreate(table)));\n    \nexport default Transaction;"]}