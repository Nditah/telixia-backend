{"version":3,"sources":["../../../src/api/admin/routes.js"],"names":["router","express","Router","get","checkAuth","isValidAdmin","fetchRecord","post","createRecord","put","updateRecord","delete","deleteRecord","login"],"mappings":";;;;;;AAIA;;;;AACA;;AACA;;;;AAEA,IAAMA,SAASC,kBAAQC,MAAR,EAAf;;AAEA;;;;;;;;;;;;;;;;AAVA;;;;AA0BAF,OAAOG,GAAP,CAAW,SAAX,EAAsB,CAACC,wBAAD,EAAYC,2BAAZ,CAAtB,EAAiDC,uBAAjD;;AAEA;;;;;;;;;;;;;AAaAN,OAAOO,IAAP,CAAY,SAAZ,EAAuB,CAACH,wBAAD,EAAYC,2BAAZ,CAAvB,EAAkDG,wBAAlD;;AAEA;;;;;;;;;;;;;;AAcAR,OAAOS,GAAP,CAAW,mBAAX,EAAgC,CAACL,wBAAD,EAAYC,2BAAZ,CAAhC,EAA2DK,wBAA3D;;AAEA;;;;;;;;;;AAUAV,OAAOW,MAAP,CAAc,mBAAd,EAAmC,CAACP,wBAAD,EAAYC,2BAAZ,CAAnC,EAA8DO,wBAA9D;;AAEA;;;;;;;;;;;;AAYAZ,OAAOO,IAAP,CAAY,eAAZ,EAA6BM,iBAA7B;;kBAEeb,M","file":"routes.js","sourcesContent":["/**\n * @author 4Decoder\n * @description Admin holds record of all admins with terminals\n */\nimport express from \"express\";\nimport { checkAuth, isValidAdmin } from \"../../middleware/authorization\";\nimport { fetchRecord, createRecord, updateRecord, deleteRecord, login } from \"./controller\";\n\nconst router = express.Router();\n\n/**\n * @api {get} /api/admins?id={recordId} Retrieve one or all records\n * @apiName RetrieveAdmin\n * @apiGroup Admin\n * @apiExample {curl} Example usage for retieving a single record:\n *      curl -i http://localhost/api/admins?id=2&fields=id,created_at,updated_at\n * @apiExample {curl} Example usage for retieving multiple records:\n *      curl -i http://localhost/api/admins?offset=10&limit=50\n * @apiParam {Number} id Unique id of the record to retrieve (optional)\n * @apiParam {Number} offset Number of records to skip (optional)\n * @apiParam {Number} limit Maximum Number of records to retrieve (optional)\n * @apiParam {String} fields Comma-separated list of record's attributes to retrieve (optional)\n * @apiDescription Records of admins distributed across terminals.\n * @apiSuccess {Object[]} Array of Objects of records.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n */\nrouter.get(\"/admins\", [checkAuth, isValidAdmin], fetchRecord);\n\n/**\n * @api {post} /api/admins Create admins\n * @apiName CreateAdmin\n * @apiGroup Admin\n * @apiParam {String} access_token master access token.\n * @apiParam {Integer} id Admin primaryKey\n * @apiParam {Integer} created_by Admin record created by\n * @apiParam {Number} created_by Admin record created by\n * @apiSuccess {Object} Admin Admin's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Admin not found.\n * @apiError 401 master access only.\n */\nrouter.post(\"/admins\", [checkAuth, isValidAdmin], createRecord);\n\n/**\n * @api {put} /api/admins/{recordId} Update admins\n * @apiName UpdateAdmin\n * @apiGroup Admin\n * @apiPermission master\n * @apiParam {String} access_token master access token.\n * @apiParam {Number} recordId Admin record id (primaryKey)\n * @apiParam {String} name Admin short name\n * @apiParam {Number} updated_by Admin record modified by\n * @apiSuccess {Object} Admin Admin's data.\n * @apiError {Object} 400 Some parameters may contain invalid values.\n * @apiError 404 Admin not found.\n * @apiError 401 master access only.\n */\nrouter.put(\"/admins/:recordId\", [checkAuth, isValidAdmin], updateRecord);\n\n/**\n * @api {delete} /api/admins/{recordId} Delete admins\n * @apiName DeleteAdmin\n * @apiGroup Admin\n * @apiPermission master\n * @apiParam {String} access_token master access token.\n * @apiSuccess (Success 204) 204 No Content.\n * @apiError 404 Admin not found.\n * @apiError 401 master access only.\n */\nrouter.delete(\"/admins/:recordId\", [checkAuth, isValidAdmin], deleteRecord);\n\n/**\n * @api {post} /api/admins/login Login Admin\n * @apiName LoginAdmin\n * @apiGroup Admin\n * @apiPermission master\n * @apiParam {String} email Admin email address (optional)\n * @apiParam {String} password Admin password (optional)\n * @apiParam {String} office_phone Admin official phone number (optional)\n * @apiParam {String} otp Admin One-Time-Password sent to phone (optional)\n * @apiSuccess (Success 200) 200 Login Successful.\n * @apiError 404 Admin not found.\n */\nrouter.post(\"/admins/login\", login);\n\nexport default router;\n"]}