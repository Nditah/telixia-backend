{"version":3,"sources":["../../../src/api/admin/model.js"],"names":["Sequelize","force","DATABASE","DROP_TABLE_IF_EXIST","FALSE","schemaLogin","email","Joi","string","optional","phone_office","otp","password","schemaFetch","id","number","offset","limit","fields","schemaCreate","title","surname","required","other_name","gender","birth_date","date","marital_status","phone_personal","address","country_iso2","otp_count","kin","kin_phone","kin_address","job_responsibility","job_title","highest_qualification","highest_institution","employment_status","employment_date","monthly_tax","monthly_salary","bank_id","bank_account_number","bank_account_name","is_salary_payable","boolean","is_document_complete","superior_id","remark","photo","last_login_date","last_login_ip","created_by","schemaUpdate","updated_by","schema","type","INTEGER","primaryKey","autoIncrement","STRING","notEmpty","ENUM","GENDER","MALE","FEMALE","allowNull","DATEONLY","Object","values","MARITAL_STATUS","defaultValue","validate","isEmail","comment","EMPLOYMENT_STATUS","DATE","DECIMAL","BOOLEAN","options","timestamps","paranoid","underscored","freezeTableName","Admin","sequelize","define","sync","then","bulkCreate","table"],"mappings":"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","file":"model.js","sourcesContent":["/**\n * @author 4Decoder\n * @property {Integer} id Admin primaryKey\n * @property {String} title Admin title (optional)\n * @property {String} surname Admin  surname (required)\n * @property {String} other_name Admin  other_name (required)\n * @property {String} gender Admin  gender (required)\n * @property {Date} birth_date Admin  birth_date (required)\n * @property {String} marital_status Admin  marital_status (required)\n * @property {String} phone_office Admin  phone_office (required)\n * @property {String} phone_personal Admin  phone_personal (required)\n * @property {String} address Admin  address (required)\n * @property {String} country_iso2 Admin  country_iso2 (required)\n * @property {String} email Admin  email (required)\n * @property {String} password Admin  password (required)\n * @property {String} otp Admin  otp (required)\n * @property {Integer} otp_count Admin  otp_count (required)\n * @property {String} kin Admin  kin (required)\n * @property {String} kin_phone Admin  kin_phone (required)\n * @property {String} kin_address Admin  kin_address (required)\n * @property {String} job_responsibility Admin  job_responsibility (required)\n * @property {String} job_title Admin  job_title (required)\n * @property {String} highest_qualification Admin  highest_qualification (optional)\n * @property {String} highest_institution Admin  highest_institution (optional)\n * @property {String} employment_status Admin  employment_status (required)\n * @property {Date} employment_date Admin  employment_date (required)\n * @property {Integer} monthly_tax Admin  monthly_tax (optional)\n * @property {Integer} monthly_salary Admin  monthly_salary (required)\n * @property {Integer} bank_id Admin  bank_id (required)\n * @property {String} bank_account_number Admin  bank_account_number (required)\n * @property {String} bank_account_name Admin  bank_account_name (required)\n * @property {Boolean} is_salary_payable Admin  is_salary_payable (optional)\n * @property {Boolean} is_document_complete Admin  is_document_complete (optional)\n * @property {Integer} superior_id Admin  superior_id (optional)\n * @property {String} remark Admin  remark (optional)\n * @property {String} photo Admin  photo (optional)  \n * @property {Date} last_login_date Admin  last_login_date (optional)\n * @property {String} last_login_ip Admin  last_login_ip (optional)\n * @property {Integer} created_by Admin record created by\n * @property {Integer} updated_by Admin record modified by\n * @description Admin holds record of all Telixia Staff\n */\nimport Joi from \"joi\";\nimport * as Sequelize from \"sequelize\";\nimport sequelize from \"../../config/sequelize\";\nimport { DATABASE, GENDER, MARITAL_STATUS,\n    EMPLOYMENT_STATUS } from \"../../constants\";\nimport table from \"./table\";\n    \nconst force = DATABASE.DROP_TABLE_IF_EXIST.FALSE;\n\nexport const schemaLogin = {\n    email: Joi.string().optional(),\n    phone_office: Joi.string().optional(),\n    otp: Joi.string().optional(),\n    password: Joi.string().optional(),\n};\n\nexport const schemaFetch = {\n    id: Joi.number().optional(),\n    offset: Joi.number().optional(),\n    limit: Joi.number().optional(),\n    fields: Joi.string().optional(),\n};\n\nexport const schemaCreate = {\n    title: Joi.string().optional(),\n    surname: Joi.string().required(),\n    other_name: Joi.string().required(),\n    gender: Joi.string().required(),\n    birth_date: Joi.date().required(),\n    marital_status: Joi.string().required(),\n    phone_office: Joi.string().required(),\n    phone_personal: Joi.string().required(),\n    address: Joi.string().required(),\n    country_iso2: Joi.string().required(),\n    email: Joi.string().required(),\n    password: Joi.string().required(),\n    otp: Joi.string().required(),\n    otp_count: Joi.number().required(),\n    kin: Joi.string().required(),\n    kin_phone: Joi.string().required(),\n    kin_address: Joi.string().required(),\n    job_responsibility: Joi.string().required(),\n    job_title: Joi.string().required(),\n    highest_qualification: Joi.string().optional(),\n    highest_institution: Joi.string().optional(),\n    employment_status: Joi.string().required(),\n    employment_date: Joi.date().required(),\n    monthly_tax: Joi.number().optional(),\n    monthly_salary: Joi.number().required(),\n    bank_id: Joi.number().required(),\n    bank_account_number: Joi.string().required(),\n    bank_account_name: Joi.string().required(),\n    is_salary_payable: Joi.boolean().optional(),\n    is_document_complete: Joi.boolean().optional(),\n    superior_id: Joi.number().optional(),\n    remark: Joi.string().optional(),\n    photo: Joi.string().optional(),  \n    last_login_date: Joi.date().optional(),\n    last_login_ip: Joi.string().optional(),\n    created_by: Joi.number().required(),\n};\n\nexport const schemaUpdate = {\n    title: Joi.string().optional(),\n    surname: Joi.string().required(),\n    other_name: Joi.string().optional(),\n    gender: Joi.string().optional(),\n    birth_date: Joi.date().optional(),\n    marital_status: Joi.string().optional(),\n    phone_office: Joi.string().optional(),\n    phone_personal: Joi.string().optional(),\n    address: Joi.string().optional(),\n    country_iso2: Joi.string().optional(),\n    email: Joi.string().optional(),\n    password: Joi.string().optional(),\n    otp: Joi.string().optional(),\n    otp_count: Joi.number().optional(),\n    kin: Joi.string().optional(),\n    kin_phone: Joi.string().optional(),\n    kin_address: Joi.string().optional(),\n    job_responsibility: Joi.string().optional(),\n    job_title: Joi.string().optional(),\n    highest_qualification: Joi.string().optional(),\n    highest_institution: Joi.string().optional(),\n    employment_status: Joi.string().optional(),\n    employment_date: Joi.date().optional(),\n    monthly_tax: Joi.number().optional(),\n    monthly_salary: Joi.number().optional(),\n    bank_id: Joi.number().optional(),\n    bank_account_number: Joi.string().optional(),\n    bank_account_name: Joi.string().optional(),\n    is_salary_payable: Joi.boolean().optional(),\n    is_document_complete: Joi.boolean().optional(),\n    superior_id: Joi.number().optional(),\n    remark: Joi.string().optional(),\n    photo: Joi.string().optional(),  \n    last_login_date: Joi.date().optional(),\n    last_login_ip: Joi.string().optional(),\n    updated_by: Joi.number().required(),\n};\n\nexport const schema = {\n    id: { type: Sequelize.INTEGER(11), primaryKey: true, autoIncrement: true },\n    title: { type: Sequelize.STRING },\n    surname: { type: Sequelize.STRING, notEmpty: true },\n    other_name: { type: Sequelize.STRING, notEmpty: true },\n    gender: {\n        type: Sequelize.ENUM(GENDER.MALE, GENDER.FEMALE),\n        allowNull: false,\n    },\n    birth_date: { type: Sequelize.DATEONLY, allowNull: false },\n    marital_status: {\n        type: Sequelize.ENUM(Object.values(MARITAL_STATUS)),\n        allowNull: false,\n    },\n    phone_office: { type: Sequelize.STRING, allowNull: false },\n    phone_personal: { type: Sequelize.STRING },\n    address: { type: Sequelize.STRING },\n    country_iso2: { type: Sequelize.STRING(2), allowNull: false, defaultValue: \"ng\" },\n    email: { type: Sequelize.STRING, validate: { isEmail: true } },\n    password: { type: Sequelize.STRING },\n    otp: { type: Sequelize.STRING },\n    otp_count: { type: Sequelize.INTEGER(11), allowNull: false, defaultValue: 0 },\n    kin: { type: Sequelize.STRING, comment: \"Fullname and Relationship\", allowNull: false },\n    kin_phone: { type: Sequelize.STRING, allowNull: false },\n    kin_address: { type: Sequelize.STRING, allowNull: false },\n    job_responsibility: { type: Sequelize.STRING },\n    job_title: { type: Sequelize.STRING },\n    highest_qualification: { type: Sequelize.STRING },\n    highest_institution: { type: Sequelize.STRING },\n    employment_status: {\n        type: Sequelize.ENUM(Object.values(EMPLOYMENT_STATUS)),\n        allowNull: false,\n    },\n    employment_date: { type: Sequelize.DATE },\n    monthly_tax: { type: Sequelize.DECIMAL(10, 2), defaultValue: 0.0 },\n    monthly_salary: { type: Sequelize.DECIMAL(10, 2), defaultValue: 0.0 },\n    bank_id: { type: Sequelize.INTEGER(11) },\n    bank_account_number: { type: Sequelize.STRING },\n    bank_account_name: { type: Sequelize.STRING },\n    is_salary_payable: { type: Sequelize.BOOLEAN, defaultValue: false, allowNull: false },\n    is_document_complete: { type: Sequelize.BOOLEAN, defaultValue: false, allowNull: false },\n    superior_id: { type: Sequelize.INTEGER(11), allowNull: false, defaultValue: 1 },\n    remark: { type: Sequelize.STRING },\n    photo: { type: Sequelize.STRING },    \n    last_login_date: { type: Sequelize.DATE },\n    last_login_ip: { type: Sequelize.STRING },\n    created_by: { type: Sequelize.INTEGER(11), allowNull: false },\n    updated_by: { type: Sequelize.INTEGER(11) },\n};\n\n\nconst options = {\n    timestamps: true,\n    paranoid: true,\n    underscored: true,\n    freezeTableName: true,\n};\nconst Admin = sequelize.define(\"admin\", schema, options);\nsequelize.sync()\n    .then(() => Admin.sync({ force }).then(() => Admin.bulkCreate(table)));\n    \nexport default Admin;"]}