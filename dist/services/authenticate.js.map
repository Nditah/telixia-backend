{"version":3,"sources":["../../src/services/authenticate.js"],"names":["adminAuthenticate","talentAuthenticate","clientAuthenticate","Sequelize","Op","params","email","phone","phone_office","otp","password","Admin","findOne","where","or","raw","then","user","Error","bcryptjs","compareSync","payload","id","userType","office_id","time","Date","token","jwt","sign","JWT","jwtSecret","expiresIn","tokenExpireTime","Talent","vehicle_id","Client"],"mappings":"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","file":"authenticate.js","sourcesContent":["import bcryptjs from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport * as Sequelize from \"sequelize\";\nimport Admin from \"../api/admin/model\";\nimport Talent from \"../api/talent/model\";\nimport Client from \"../api/client/model\";\nimport { JWT } from \"../constants\";\n\nconst { Op } = Sequelize;\n\nexport function adminAuthenticate(params) {\n    // return next();\n    const { email, phone_office: phone, otp, password } = params;\n    return Admin.findOne({\n        where: {\n            [ Op.or ]: [{ email }, { phone_office: phone }],\n        },\n        raw: true,\n    })\n    // eslint-disable-next-line complexity\n        .then((user) => {\n            if (!user) { throw new Error(\"Authentication failed. User not found.\"); }\n            if (!(bcryptjs.compareSync(password || \"\", user.password)\n            || bcryptjs.compareSync(otp || \"\", user.otp))) {\n                throw new Error(\"Authentication failed. Wrong password or otp.\");\n            }\n            const payload = {\n                id: user.id,\n                userType: \"admin\",\n                email: user.email,\n                phone_office: user.phone_office,\n                office_id: user.office_id,\n                time: new Date(),\n            };\n\n            const token = jwt.sign(payload, JWT.jwtSecret, {\n                expiresIn: JWT.tokenExpireTime,\n            });\n            return token;\n        });\n}\n\nexport function talentAuthenticate(params) {\n    // return next();\n    const { email, phone_office: phone, otp, password } = params;\n    return Talent.findOne({\n        where: {\n            [ Op.or ]: [{ email }, { phone_office: phone }],\n        },\n        raw: true,\n    })\n    // eslint-disable-next-line complexity\n        .then((user) => {\n            if (!user) { throw new Error(\"Authentication failed. talent not found.\"); }\n            if (!(bcryptjs.compareSync(password || \"\", user.password)\n            || bcryptjs.compareSync(otp || \"\", user.otp))) {\n                throw new Error(\"Authentication failed. Wrong password or otp.\");\n            }\n            const payload = {\n                id: user.id,\n                userType: \"talent\",\n                email: user.email,\n                phone_office: user.phone_office,\n                vehicle_id: user.vehicle_id,\n                time: new Date(),\n            };\n\n            const token = jwt.sign(payload, JWT.jwtSecret, {\n                expiresIn: JWT.tokenExpireTime,\n            });\n            return token;\n        });\n}\n\nexport function clientAuthenticate(params) {\n    // return next();\n    const { email, phone, otp, password } = params;\n    return Client.findOne({\n        where: {\n            [ Op.or ]: [{ email }, { phone }],\n        },\n        raw: true,\n    })\n    // eslint-disable-next-line complexity\n        .then((user) => {\n            if (!user) { throw new Error(\"Authentication failed. Client not found.\"); }\n            if (!(bcryptjs.compareSync(password || \"\", user.password)\n            || bcryptjs.compareSync(otp || \"\", user.otp))) {\n                throw new Error(\"Authentication failed. Wrong password or otp.\");\n            }\n            const payload = {\n                id: user.id,\n                userType: \"client\",\n                email: user.email,\n                phone: user.phone,\n                time: new Date(),\n            };\n\n            const token = jwt.sign(payload, JWT.jwtSecret, {\n                expiresIn: JWT.tokenExpireTime,\n            });\n            return token;\n        });\n}\n"]}