/**
 * @author 4Decoder
 * @property {Integer} id Staff primaryKey
 * @property {String} name Staff short name
 * @property {Integer} created_by Staff record created by
 * @property {Integer} updated_by Staff record modified by
 * @description Staff holds record of all cities with terminal_list
 */
import Joi from "joi";
import * as Sequelize from "sequelize";
import sequelize from "../config/sequelize";
import { DATABASE, GENDER, MARITAL_STATUS,
    EMPLOYMENT_STATUS, SUBSIDIARY } from "../../../constants";
import table from "./table";
    
const force = DATABASE.DROP_TABLE_IF_EXIST.FALSE;

export const schemaLogin = {
    email: Joi.string().optional(),
    phone_office: Joi.string().optional(),
    otp: Joi.string().optional(),
    password: Joi.string().optional(),
};

export const schemaFetch = {
    id: Joi.number().optional(),
    offset: Joi.number().optional(),
    limit: Joi.number().optional(),
    fields: Joi.string().optional(),
};

export const schemaCreate = {
    serial: Joi.string().optional(),
    category: Joi.string().optional(),
    title: Joi.string().optional(),
    surname: Joi.string().required(),
    other_name: Joi.string().required(),
    gender: Joi.string().required(),
    birth_date: Joi.date().required(),
    marital_status: Joi.string().required(),
    children: Joi.number().optional(),
    phone_office: Joi.string().required(),
    phone_personal: Joi.string().optional(),
    address: Joi.string().optional(),
    village: Joi.string().optional(),
    state_id: Joi.number().required(),
    county_id: Joi.number().required(),
    country_iso2: Joi.string().optional(),
    email: Joi.string().optional(),
    password: Joi.string().optional(),
    otp: Joi.string().optional(),
    otp_count: Joi.number().optional(),
    kin: Joi.string().required(),
    kin_phone: Joi.string().required(),
    kin_address: Joi.string().required(),
    guarantor1: Joi.string().required(),
    guarantor1_phone: Joi.string().required(),
    guarantor1_address: Joi.string().required(),
    guarantor2: Joi.string().optional(),
    guarantor2_phone: Joi.string().optional(),
    guarantor2_address: Joi.string().optional(),
    profession: Joi.string().optional(),
    qualification: Joi.string().optional(),
    institution: Joi.string().optional(),
    employment_status: Joi.string().required(),
    tax: Joi.number().optional(),
    basic_salary: Joi.number().optional(),
    bonus: Joi.number().optional(),
    entertainment_allowance: Joi.number().optional(),
    house_allowance: Joi.number().optional(),
    lunch_allowance: Joi.number().optional(),
    medical_allowance: Joi.number().optional(),
    transport_allowance: Joi.number().optional(),
    utility_allowance: Joi.number().optional(),
    welfare_allowance: Joi.number().optional(),
    pension: Joi.number().optional(),
    assurance: Joi.number().optional(),
    bank_id: Joi.number().optional(),
    bank_account_number: Joi.string().optional(),
    bank_account_name: Joi.string().optional(),
    rank_id: Joi.number().optional(),
    office_id: Joi.number().required(),
    superior_id: Joi.number().required(),
    subsidiary: Joi.string().valid(Object.values(SUBSIDIARY)).required(),
    terminal_id: Joi.number().required(),
    vehicle_id: Joi.number().optional(),
    notice: Joi.string().optional(),
    rating: Joi.string().optional(),
    remark: Joi.string().optional(),
    photo: Joi.string().optional(),
    is_salary_payable: Joi.boolean().optional(),
    is_document_complete: Joi.boolean().optional(),
    access_level: Joi.string().optional(),
    approved_by: Joi.number().optional(),
    approved_date: Joi.date().optional(),
    disengaged_by: Joi.number().optional(),
    disengaged_date: Joi.date().optional(),
    created_by: Joi.number().required(),
};

export const schemaUpdate = {
    serial: Joi.string().optional(),
    category: Joi.string().optional(),
    title: Joi.string().optional(),
    surname: Joi.string().optional(),
    other_name: Joi.string().optional(),
    gender: Joi.string().optional(),
    birth_date: Joi.date().optional(),
    marital_status: Joi.string().optional(),
    children: Joi.number().optional(),
    phone_office: Joi.string().optional(),
    phone_personal: Joi.string().optional(),
    address: Joi.string().optional(),
    village: Joi.string().optional(),
    state_id: Joi.number().optional(),
    county_id: Joi.number().optional(),
    country_iso2: Joi.string().optional(),
    email: Joi.string().optional(),
    password: Joi.string().optional(),
    otp: Joi.string().optional(),
    otp_count: Joi.number().optional(),
    kin: Joi.string().optional(),
    kin_phone: Joi.string().optional(),
    kin_address: Joi.string().optional(),
    guarantor1: Joi.string().optional(),
    guarantor1_phone: Joi.string().optional(),
    guarantor1_address: Joi.string().optional(),
    guarantor2: Joi.string().optional(),
    guarantor2_phone: Joi.string().optional(),
    guarantor2_address: Joi.string().optional(),
    profession: Joi.string().optional(),
    qualification: Joi.string().optional(),
    institution: Joi.string().optional(),
    employment_status: Joi.string().optional(),
    tax: Joi.number().optional(),
    basic_salary: Joi.number().optional(),
    bonus: Joi.number().optional(),
    entertainment_allowance: Joi.number().optional(),
    house_allowance: Joi.number().optional(),
    lunch_allowance: Joi.number().optional(),
    medical_allowance: Joi.number().optional(),
    transport_allowance: Joi.number().optional(),
    utility_allowance: Joi.number().optional(),
    welfare_allowance: Joi.number().optional(),
    pension: Joi.number().optional(),
    assurance: Joi.number().optional(),
    bank_id: Joi.number().optional(),
    bank_account_number: Joi.string().optional(),
    bank_account_name: Joi.string().optional(),
    rank_id: Joi.number().optional(),
    office_id: Joi.number().optional(),
    superior_id: Joi.number().optional(),
    subsidiary: Joi.string().valid(Object.values(SUBSIDIARY)).optional(),
    terminal_id: Joi.number().optional(),
    vehicle_id: Joi.number().optional(),
    notice: Joi.string().optional(),
    rating: Joi.string().optional(),
    remark: Joi.string().optional(),
    photo: Joi.string().optional(),
    is_salary_payable: Joi.boolean().optional(),
    is_document_complete: Joi.boolean().optional(),
    access_level: Joi.string().optional(),
    approved_by: Joi.number().optional(),
    approved_date: Joi.date().optional(),
    disengaged_by: Joi.number().optional(),
    disengaged_date: Joi.date().optional(),
    updated_by: Joi.number().required(),
};

const schema = {
    id: { type: Sequelize.INTEGER(11), primaryKey: true, autoIncrement: true },
    serial: { type: Sequelize.STRING },
    category: { type: Sequelize.STRING },
    title: { type: Sequelize.STRING },
    surname: { type: Sequelize.STRING, notEmpty: true },
    other_name: { type: Sequelize.STRING, notEmpty: true },
    gender: {
        type: Sequelize.ENUM(GENDER.MALE, GENDER.FEMALE),
        defaultValue: GENDER.MALE,
        allowNull: false,
    },
    birth_date: { type: Sequelize.DATEONLY, allowNull: false },
    marital_status: {
        type: Sequelize.ENUM(MARITAL_STATUS.SINGLE, MARITAL_STATUS.MARRIED,
            MARITAL_STATUS.DIVORSED, MARITAL_STATUS.SEPARATED,
            MARITAL_STATUS.WIDOWED),
        allowNull: false,
    },
    children: { type: Sequelize.STRING },
    phone_office: { type: Sequelize.STRING, allowNull: false },
    phone_personal: { type: Sequelize.STRING },
    address: { type: Sequelize.STRING },
    village: { type: Sequelize.STRING },
    state_id: { type: Sequelize.INTEGER(11), allowNull: false },
    county_id: { type: Sequelize.INTEGER(11), allowNull: false },
    country_iso2: { type: Sequelize.STRING(2), allowNull: false, defaultValue: "ng" },
    email: { type: Sequelize.STRING, validate: { isEmail: true } },
    password: { type: Sequelize.STRING },
    otp: { type: Sequelize.STRING },
    otp_count: { type: Sequelize.INTEGER(11), allowNull: false, defaultValue: 0 },
    kin: { type: Sequelize.STRING, allowNull: false },
    kin_phone: { type: Sequelize.STRING, allowNull: false },
    kin_address: { type: Sequelize.STRING, allowNull: false },
    guarantor1: { type: Sequelize.STRING, allowNull: false },
    guarantor1_phone: { type: Sequelize.STRING, allowNull: false },
    guarantor1_address: { type: Sequelize.STRING, allowNull: false },
    guarantor2: { type: Sequelize.STRING },
    guarantor2_phone: { type: Sequelize.STRING },
    guarantor2_address: { type: Sequelize.STRING },
    profession: { type: Sequelize.STRING },
    qualification: { type: Sequelize.STRING },
    institution: { type: Sequelize.STRING },
    employment_status: {
        type: Sequelize.ENUM(EMPLOYMENT_STATUS.ON_DUTY, EMPLOYMENT_STATUS.ON_LEAVE,
            EMPLOYMENT_STATUS.ON_RETIREMENT, EMPLOYMENT_STATUS.ON_SUSPENSION,
            EMPLOYMENT_STATUS.ON_PROBATION),
        allowNull: false,
    },
    tax: { type: Sequelize.DECIMAL(10, 2), defaultValue: 0.0 },
    basic_salary: { type: Sequelize.DECIMAL(10, 2), defaultValue: 0.0 },
    bonus: { type: Sequelize.DECIMAL(10, 2), defaultValue: 0.0 },
    entertainment_allowance: { type: Sequelize.DECIMAL(10, 2), defaultValue: 0.0 },
    house_allowance: { type: Sequelize.DECIMAL(10, 2), defaultValue: 0.0 },
    lunch_allowance: { type: Sequelize.DECIMAL(10, 2), defaultValue: 0.0 },
    medical_allowance: { type: Sequelize.DECIMAL(10, 2), defaultValue: 0.0 },
    transport_allowance: { type: Sequelize.DECIMAL(10, 2), defaultValue: 0.0 },
    utility_allowance: { type: Sequelize.DECIMAL(10, 2), defaultValue: 0.0 },
    welfare_allowance: { type: Sequelize.DECIMAL(10, 2), defaultValue: 0.0 },
    pension: { type: Sequelize.DECIMAL(10, 2), defaultValue: 0.0 },
    assurance: { type: Sequelize.DECIMAL(10, 2), defaultValue: 0.0 },
    bank_id: { type: Sequelize.INTEGER(11) },
    bank_account_number: { type: Sequelize.STRING },
    bank_account_name: { type: Sequelize.STRING },
    rank_id: { type: Sequelize.INTEGER(11) },
    office_id: { type: Sequelize.INTEGER(11), allowNull: false },
    superior_id: { type: Sequelize.INTEGER(11), allowNull: false },
    subsidiary: {
        type: Sequelize.ENUM(Object.values(SUBSIDIARY)),
        allowNull: false,
    },
    terminal_id: { type: Sequelize.INTEGER(11), defaultValue: 1, allowNull: false },
    vehicle_id: { type: Sequelize.INTEGER(11) },
    notice: { type: Sequelize.STRING },
    rating: { type: Sequelize.STRING },
    remark: { type: Sequelize.STRING },
    photo: { type: Sequelize.STRING },
    is_salary_payable: { type: Sequelize.BOOLEAN, defaultValue: false, allowNull: false },
    is_document_complete: { type: Sequelize.BOOLEAN, defaultValue: false, allowNull: false },
    access_level: { type: Sequelize.STRING, defaultValue: "0", allowNull: false },
    approved_by: { type: Sequelize.INTEGER(11) },
    approved_date: { type: Sequelize.DATE },
    disengaged_by: { type: Sequelize.INTEGER(11) },
    disengaged_date: { type: Sequelize.DATE },
    last_login: { type: Sequelize.DATE },
    created_by: { type: Sequelize.INTEGER(11), allowNull: false },
    updated_by: { type: Sequelize.INTEGER(11) },
};


const options = {
    timestamps: true,
    paranoid: true,
    underscored: true,
    freezeTableName: true,
};
const Staff = sequelize.define("staff", schema, options);
sequelize.sync()
    .then(() => Staff.sync({ force }).then(() => Staff.bulkCreate(table)));
    
export default Staff;